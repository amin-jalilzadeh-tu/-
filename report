
# 1. Database Usage

## 1.1 All Possible `filter_by` Values and Which Key They Use

The function `load_buildings_from_db(filter_criteria, filter_by)` can take one of the following `filter_by` strings:

1. **"meestvoorkomendepostcode"**  
   - Expects `filter_criteria["meestvoorkomendepostcode"]` to be a **list of strings** (e.g., `["4816BL"]`).

2. **"pand_id"**  
   - Expects `filter_criteria["pand_id"]` to be a **list** (even if it’s just one item), e.g., `["0383100000001369", "0383100000001370"]`.

3. **"pand_ids"**  
   - Similar to `"pand_id"`, but the code uses a separate field from `filter_criteria["pand_ids"]`.

4. **"bbox_xy"**  
   - Expects `filter_criteria["bbox_xy"] = [minx, miny, maxx, maxy]` (4 floats).

5. **"bbox_latlon"**  
   - Expects `filter_criteria["bbox_latlon"] = [min_lat, min_lon, max_lat, max_lon]`.
   - Meaning: only buildings whose (`lat`, `lon`) are inside that bounding box.

---

## 1.2 Table of `filter_by` → Expected `filter_criteria` Format

| `filter_by`                 | Field(s) in `filter_criteria`            | Example Value(s)                                     |
|-----------------------------|-------------------------------------------|------------------------------------------------------|
| `"meestvoorkomendepostcode"`| `"meestvoorkomendepostcode"` (list)      | `["4816BL", "2012AB"]`                              |
| `"pand_id"`                 | `"pand_id"` (list)                       | `["0383100000001369", "0383100000001370"]`          |
| `"pand_ids"`                | `"pand_ids"` (list)                      | `["XYZ123", "XYZ999"]`                              |
| `"bbox_xy"`                 | `"bbox_xy" = [minx, miny, maxx, maxy]`   | `[120000.0, 487000.0, 121000.0, 488000.0]`           |
| `"bbox_latlon"`             | `"bbox_latlon" = [min_lat, min_lon, max_lat, max_lon]` | `[52.35, 4.85, 52.37, 4.92]` |

---

## 1.3 Example JSON Schema for the DB Filter

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Database Filter JSON",
  "type": "object",
  "properties": {
    "use_database": {
      "type": "boolean",
      "description": "If false, code skip the DB and do with user csv input."
    },
    "filter_by": {
      "type": "string",
      "enum": ["meestvoorkomendepostcode", "pand_id", "pand_ids", "bbox_xy", "bbox_latlon"],
      "description": "Which key in db_filter to use for the WHERE clause."
    },
    "db_filter": {
      "type": "object",
      "properties": {
        "meestvoorkomendepostcode": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of 1+ postcodes for a WHERE b.meestvoorkomendepostcode = ANY(...) query."
        },
        "pand_id": {
          "type": "array",
          "items": { "type": "string" },
          "description": "List of 1+ pand_id(s) => WHERE b.pand_id = ANY(...)"
        },
        "pand_ids": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Alternative list of pand_id(s)."
        },
        "bbox_xy": {
          "type": "array",
          "items": { "type": "number" },
          "minItems": 4,
          "maxItems": 4,
          "description": "[minx, miny, maxx, maxy]."
        },
        "bbox_latlon": {
          "type": "array",
          "items": { "type": "number" },
          "minItems": 4,
          "maxItems": 4,
          "description": "[min_lat, min_lon, max_lat, max_lon]."
        }
      }
    }
  },
  "required": ["filter_by", "db_filter"],
  "additionalProperties": false
}
```

---

## 1.4 Example Payload

```json
{
  "use_database": true,
  "filter_by": "bbox_latlon",
  "db_filter": {
    "meestvoorkomendepostcode": ["4816BL"],
    "pand_id": ["0383100000001369", "0383100000001370"],
    "pand_ids": ["XYZ123", "XYZ999"],
    "bbox_xy": [120000.0, 487000.0, 121000.0, 488000.0],
    "bbox_latlon": [52.35, 4.85, 52.37, 4.92]
  }
}
```

- In this example, we include **all possible keys** in `db_filter`, but since `"filter_by": "bbox_latlon"`, the code only uses `[52.35, 4.85, 52.37, 4.92]`. The rest is effectively ignored by the query function.
- If `"use_database"` is `false`, the application **skips** calling `load_buildings_from_db()` entirely.

---

# 2. IDF Creation

When creating the IDF (Input Data File), there are a few main parts:

1. **Non-geometry** elements  
2. **Geometry** elements, which can be broken down further:
   - **Geometry of buildings creation**
   - **Shadow of surrounding buildings**
   - **Shadow of surrounding trees**
