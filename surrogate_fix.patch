--- a/c_surrogate/surrogate_data_extractor.py
+++ b/c_surrogate/surrogate_data_extractor.py
@@ -744,14 +744,30 @@ class SurrogateDataExtractor:
         }
         
         for key, data in self.data.items():
-            if data is not None and not data.empty:
+            # Handle dictionaries (like comparison_outputs)
+            if isinstance(data, dict):
+                if data:  # non-empty dict
+                    summary['data_sources'][key] = {
+                        'type': 'dictionary',
+                        'keys': list(data.keys()),
+                        'num_entries': len(data)
+                    }
+                    # Add specific info for comparison_outputs
+                    if key == 'comparison_outputs':
+                        total_rows = sum(len(df) if hasattr(df, '__len__') else 0 for df in data.values())
+                        summary['data_sources'][key]['total_rows'] = total_rows
+            # Handle DataFrames
+            elif isinstance(data, pd.DataFrame) and not data.empty:
                 summary['data_sources'][key] = {
                     'type': 'dataframe',
                     'rows': len(data),
                     'columns': len(data.columns),
                     'memory_usage_mb': data.memory_usage(deep=True).sum() / 1024 / 1024
                 }
                 
+                # Add specific summaries
+                if key == 'modifications' and 'param_id' in data.columns:
+                    summary['data_sources'][key]['unique_parameters'] = data['param_id'].nunique()
+                    if 'category' in data.columns:
                         summary['data_sources'][key]['categories'] = data['category'].unique().tolist()
@@ -107,10 +107,14 @@ class SurrogateDataExtractor:
             self.tracker.track_extraction(summary, self.data)
             
             # Export data quality reports
-            for name, df in self.data.items():
-                if df is not None and not df.empty:
-                    quality_report = self.tracker.generate_data_quality_report(df, name)
+            for name, data in self.data.items():
+                # Only generate quality reports for DataFrames
+                if isinstance(data, pd.DataFrame) and not data.empty:
+                    quality_report = self.tracker.generate_data_quality_report(data, name)
                     quality_path = self.tracker.dirs["extraction"] / f"quality_{name}.json"
                     with open(quality_path, "w") as f:
                         json.dump(quality_report, f, indent=2)
+                elif isinstance(data, dict) and data:
+                    # For dictionaries, log summary info
+                    logger.info(f"[Extractor] {name} contains {len(data)} entries (dictionary)")
         
         return self.data