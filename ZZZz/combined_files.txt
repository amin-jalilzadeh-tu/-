File: D:\Documents\PhD_DT_dummy\project\src\components\MapComponent.tsx
============================================================
import React, { useRef, useEffect } from 'react';
import Map, { Source, Layer, Marker } from 'react-map-gl';
import { mockFeeders, mockDistrictBoundaries } from '../data/mockData';

interface MapComponentProps {
  selectedFeeder: string | null;
  onFeederSelect: (feederId: string) => void;
}

const MapComponent: React.FC<MapComponentProps> = ({ selectedFeeder, onFeederSelect }) => {
  const mapRef = useRef<any>(null);

  useEffect(() => {
    if (selectedFeeder && mapRef.current) {
      const feeder = mockFeeders.find(f => f.feeder_id === selectedFeeder);
      if (feeder) {
        mapRef.current.flyTo({
          center: [feeder.lon, feeder.lat],
          zoom: 14,
          duration: 1000
        });
      }
    }
  }, [selectedFeeder]);

  return (
    <div className="h-full w-full rounded-lg overflow-hidden border border-gray-200">
      <Map
        ref={mapRef}
        initialViewState={{
          longitude: 4.3571, // Centered on Delft, Netherlands
          latitude: 52.0116,
          zoom: 12
        }}
        style={{ width: '100%', height: '100%' }}
        mapStyle="mapbox://styles/mapbox/light-v11"
        mapboxAccessToken={import.meta.env.VITE_MAPBOX_TOKEN}
      >
        {/* District boundaries */}
        <Source id="district-boundaries" type="geojson" data={mockDistrictBoundaries}>
          <Layer
            id="district-fill"
            type="fill"
            paint={{
              'fill-color': [
                'case',
                ['==', ['get', 'district_id'], selectedFeeder || ''],
                '#1a73e8',
                '#a0c4ff'
              ],
              'fill-opacity': 0.3
            }}
          />
          <Layer
            id="district-outline"
            type="line"
            paint={{
              'line-color': [
                'case',
                ['==', ['get', 'district_id'], selectedFeeder || ''],
                '#1a73e8',
                '#6b9aef'
              ],
              'line-width': [
                'case',
                ['==', ['get', 'district_id'], selectedFeeder || ''],
                2,
                1
              ]
            }}
          />
        </Source>

        {/* Feeder markers */}
        {mockFeeders.map(feeder => (
          <Marker
            key={feeder.feeder_id}
            longitude={feeder.lon}
            latitude={feeder.lat}
            onClick={() => onFeederSelect(feeder.feeder_id)}
          >
            <div className={`w-4 h-4 rounded-full ${selectedFeeder === feeder.feeder_id ? 'bg-blue-600 ring-4 ring-blue-200' : 'bg-blue-400'}`} />
          </Marker>
        ))}
      </Map>
    </div>
  );
};

export default MapComponent;
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\components\Navbar.tsx
============================================================
import React, { useContext } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Home, Map, Database, Settings, Activity, Network, Brain, TrendingUp, BarChart2, FileText } from 'lucide-react';

export const Navbar: React.FC = () => {
  const { selectedDistrict } = useContext(AppContext);
  const location = useLocation();
  
  const isActive = (path: string) => {
    return location.pathname.includes(path);
  };

  return (
    <nav className="bg-white shadow-md">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="flex items-center">
                <Network className="h-8 w-8 text-blue-600" />
                <span className="ml-2 text-xl font-bold text-gray-900">GridTwin</span>
              </Link>
            </div>
            
            {selectedDistrict && (
              <div className="ml-10 flex items-center space-x-4">
                <Link 
                  to={`/district/${selectedDistrict}`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/district/') && !isActive('/explorer') && !isActive('/scenarios') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <Map className="h-4 w-4 mr-1" />
                    <span>Overview</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/explorer`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/explorer') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <Database className="h-4 w-4 mr-1" />
                    <span>Data Explorer</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/scenarios`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/scenarios') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <Settings className="h-4 w-4 mr-1" />
                    <span>Scenarios</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/knowledge-graph`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/knowledge-graph') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <Network className="h-4 w-4 mr-1" />
                    <span>Knowledge Graph</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/advanced-analytics`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/advanced-analytics') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <Brain className="h-4 w-4 mr-1" />
                    <span>Advanced Analytics</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/strategic-planning`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/strategic-planning') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <TrendingUp className="h-4 w-4 mr-1" />
                    <span>Strategic Planning</span>
                  </div>
                </Link>
                
                <Link 
                  to={`/district/${selectedDistrict}/comparison`} 
                  className={`px-3 py-2 rounded-md text-sm font-medium ${isActive('/comparison') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-blue-50'}`}
                >
                  <div className="flex items-center">
                    <BarChart2 className="h-4 w-4 mr-1" />
                    <span>Comparison</span>
                  </div>
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\context\AppContext.tsx
============================================================
import { createContext } from 'react';

interface AppContextType {
  selectedDistrict: string | null;
  setSelectedDistrict: (district: string | null) => void;
  selectedScenario: string | null;
  setSelectedScenario: (scenario: string | null) => void;
  districtScope: any | null;
  setDistrictScope: (scope: any) => void;
  scenarios: any[];
  setScenarios: (scenarios: any[]) => void;
  simulationResults: any | null;
  setSimulationResults: (results: any) => void;
  gridResults: any | null;
  setGridResults: (results: any) => void;
  clusterResults: any | null;
  setClusterResults: (results: any) => void;
}

export const AppContext = createContext<AppContextType>({
  selectedDistrict: null,
  setSelectedDistrict: () => {},
  selectedScenario: null,
  setSelectedScenario: () => {},
  districtScope: null,
  setDistrictScope: () => {},
  scenarios: [],
  setScenarios: () => {},
  simulationResults: null,
  setSimulationResults: () => {},
  gridResults: null,
  setGridResults: () => {},
  clusterResults: null,
  setClusterResults: () => {}
});
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\data\mockData.ts
============================================================
// Mock data for the application

// Mock feeders data
export const mockFeeders = [
  { feeder_id: "FDR001", lat: 52.0116, lon: 4.3571, voltage_level: "MV", district_name: "Delft Centrum", postcode_prefix: "2611" },
  { feeder_id: "FDR002", lat: 52.0000, lon: 4.3600, voltage_level: "MV", district_name: "Tanthof West", postcode_prefix: "2622" },
  { feeder_id: "FDR003", lat: 51.9870, lon: 4.3210, voltage_level: "MV", district_name: "Voorhof Hoogbouw", postcode_prefix: "2624" },
  { feeder_id: "FDR004", lat: 52.0200, lon: 4.3700, voltage_level: "MV", district_name: "TU Delft Campus", postcode_prefix: "2628" },
  { feeder_id: "FDR005", lat: 52.0050, lon: 4.3800, voltage_level: "MV", district_name: "Delftse Hout", postcode_prefix: "2616" }
];

// Mock district boundaries GeoJSON
export const mockDistrictBoundaries = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        district_id: "FDR001",
        name: "Delft Centrum",
        primary_substation_id: "SUB_A_01"
      },
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [4.3471, 52.0066],
            [4.3671, 52.0066],
            [4.3671, 52.0166],
            [4.3471, 52.0166],
            [4.3471, 52.0066]
          ]
        ]
      }
    },
    {
      type: "Feature",
      properties: {
        district_id: "FDR002",
        name: "Tanthof West",
        primary_substation_id: "SUB_A_02"
      },
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [4.3500, 51.9950],
            [4.3700, 51.9950],
            [4.3700, 52.0050],
            [4.3500, 52.0050],
            [4.3500, 51.9950]
          ]
        ]
      }
    },
    {
      type: "Feature",
      properties: {
        district_id: "FDR003",
        name: "Voorhof Hoogbouw",
        primary_substation_id: "SUB_B_01"
      },
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [4.3110, 51.9820],
            [4.3310, 51.9820],
            [4.3310, 51.9920],
            [4.3110, 51.9920],
            [4.3110, 51.9820]
          ]
        ]
      }
    },
    {
      type: "Feature",
      properties: {
        district_id: "FDR004",
        name: "TU Delft Campus",
        primary_substation_id: "SUB_C_01"
      },
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [4.3600, 52.0150],
            [4.3800, 52.0150],
            [4.3800, 52.0250],
            [4.3600, 52.0250],
            [4.3600, 52.0150]
          ]
        ]
      }
    },
    {
      type: "Feature",
      properties: {
        district_id: "FDR005",
        name: "Delftse Hout",
        primary_substation_id: "SUB_D_01"
      },
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [4.3700, 52.0000],
            [4.3900, 52.0000],
            [4.3900, 52.0100],
            [4.3700, 52.0100],
            [4.3700, 52.0000]
          ]
        ]
      }
    }
  ]
};

// Mock district summary data
export const mockDistrictSummary = {
  FDR001: {
    num_buildings: 250,
    total_peak_load_kW: 1205.7,
    total_solar_capacity_kWp: 85.5,
    num_lines: 25,
    num_transformers: 4
  },
  FDR002: {
    num_buildings: 180,
    total_peak_load_kW: 950.2,
    total_solar_capacity_kWp: 120.0,
    num_lines: 18,
    num_transformers: 3
  },
  FDR003: {
    num_buildings: 320,
    total_peak_load_kW: 1500.5,
    total_solar_capacity_kWp: 65.0,
    num_lines: 30,
    num_transformers: 5
  },
  FDR004: {
    num_buildings: 150,
    total_peak_load_kW: 2200.0,
    total_solar_capacity_kWp: 350.0,
    num_lines: 22,
    num_transformers: 6
  },
  FDR005: {
    num_buildings: 90,
    total_peak_load_kW: 450.0,
    total_solar_capacity_kWp: 180.0,
    num_lines: 12,
    num_transformers: 2
  }
};

// Mock buildings data
export const mockBuildings = [
  { building_id: "B0001", lat: 52.0118, lon: 4.3575, building_type: "Residential", bouwjaar: 1935, area_m2: 120, postcode: "2611AB", peak_load_kW: 10.5, has_solar: true, solar_capacity_kWp: 5.0, retrofit_status: "None", hvac_type: "Gas Boiler", line_id: "L001A", feeder_id: "FDR001" },
  { building_id: "B0002", lat: 52.0120, lon: 4.3579, building_type: "Commercial", bouwjaar: 1970, area_m2: 300, postcode: "2611AC", peak_load_kW: 25.0, has_solar: false, solar_capacity_kWp: 0.0, retrofit_status: "Light", hvac_type: "Central HVAC", line_id: "L001A", feeder_id: "FDR001" },
  { building_id: "B0003", lat: 52.0115, lon: 4.3580, building_type: "Residential", bouwjaar: 1925, area_m2: 150, postcode: "2611AD", peak_load_kW: 12.0, has_solar: true, solar_capacity_kWp: 7.5, retrofit_status: "None", hvac_type: "Gas Boiler", line_id: "L001B", feeder_id: "FDR001" },
  { building_id: "B0004", lat: 52.0110, lon: 4.3570, building_type: "Residential", bouwjaar: 1980, area_m2: 180, postcode: "2611AE", peak_load_kW: 15.0, has_solar: false, solar_capacity_kWp: 0.0, retrofit_status: "None", hvac_type: "Heat Pump", line_id: "L001B", feeder_id: "FDR001" },
  { building_id: "B0005", lat: 52.0105, lon: 4.3565, building_type: "Commercial", bouwjaar: 2005, area_m2: 500, postcode: "2611AF", peak_load_kW: 50.0, has_solar: true, solar_capacity_kWp: 25.0, retrofit_status: "Moderate", hvac_type: "Central HVAC", line_id: "L002A", feeder_id: "FDR001" }
];

// Mock grid lines data
export const mockGridLines = [
  { line_id: "L001A", from_node_id: "FDR001_BUS", to_node_id: "JCN01", voltage_level: "MV", length_km: 0.5, capacity_rating_A: 250, r_ohm_per_km: 0.12, x_ohm_per_km: 0.08 },
  { line_id: "L001B", from_node_id: "FDR001_BUS", to_node_id: "JCN02", voltage_level: "MV", length_km: 0.3, capacity_rating_A: 250, r_ohm_per_km: 0.12, x_ohm_per_km: 0.08 },
  { line_id: "L002A", from_node_id: "JCN01", to_node_id: "JCN03", voltage_level: "MV", length_km: 0.4, capacity_rating_A: 200, r_ohm_per_km: 0.15, x_ohm_per_km: 0.09 },
  { line_id: "LV_B0001_L1", from_node_id: "TR001_LVBUS", to_node_id: "B0001", voltage_level: "LV", length_km: 0.05, capacity_rating_A: 100, r_ohm_per_km: 0.64, x_ohm_per_km: 0.09 },
  { line_id: "LV_B0002_L1", from_node_id: "TR001_LVBUS", to_node_id: "B0002", voltage_level: "LV", length_km: 0.06, capacity_rating_A: 100, r_ohm_per_km: 0.64, x_ohm_per_km: 0.09 }
];

// Mock transformers data
export const mockTransformers = [
  { transformer_id: "TR001", feeder_id: "FDR001", substation_id: "SUB_A_01", capacity_MVA: 0.5, primary_voltage_kV: 10, secondary_voltage_kV: 0.4, r_pu: 0.01, x_pu: 0.04 },
  { transformer_id: "TR002", feeder_id: "FDR001", substation_id: "SUB_A_01", capacity_MVA: 0.25, primary_voltage_kV: 10, secondary_voltage_kV: 0.4, r_pu: 0.01, x_pu: 0.04 },
  { transformer_id: "TR003", feeder_id: "FDR001", substation_id: "SUB_A_02", capacity_MVA: 0.5, primary_voltage_kV: 10, secondary_voltage_kV: 0.4, r_pu: 0.01, x_pu: 0.04 },
  { transformer_id: "TR004", feeder_id: "FDR001", substation_id: "SUB_A_02", capacity_MVA: 0.5, primary_voltage_kV: 10, secondary_voltage_kV: 0.4, r_pu: 0.01, x_pu: 0.04 }
];

// Mock DER assets data
export const mockDERAssets = [
  { building_id: "B0001", building_type: "Residential", solar_capacity_kWp: 5.0, battery_capacity_kWh: null, battery_power_kW: null },
  { building_id: "B0003", building_type: "Residential", solar_capacity_kWp: 7.5, battery_capacity_kWh: 10.0, battery_power_kW: 5.0 },
  { building_id: "B0005", building_type: "Commercial", solar_capacity_kWp: 25.0, battery_capacity_kWh: null, battery_power_kW: null }
];

// Mock grid results data
export const mockGridResults = {
  scenario_id: "SCN001",
  district_id: "FDR001",
  time_steps: ["2023-07-15 12:00:00", "2023-01-10 18:00:00"],
  entities: [
    { entity_id: "B0001", record_type: "bus", voltage_pu: 0.985, p_injection_kW: -3.3, q_injection_kvar: 0.0 },
    { entity_id: "B0002", record_type: "bus", voltage_pu: 0.982, p_injection_kW: 3.1, q_injection_kvar: 0.0 },
    { entity_id: "TR001_LVBUS", record_type: "bus", voltage_pu: 0.990, p_injection_kW: 50.2, q_injection_kvar: 5.1 },
    { entity_id: "LV_B0001_L1", record_type: "line", p_flow_from_kW: -3.3, q_flow_from_kvar: 0.0, i_from_A: 8.25, i_to_A: 8.25, loading_percent: 8.3 },
    { entity_id: "TR001", record_type: "transformer", p_flow_from_kW: 250.5, q_flow_from_kvar: 25.6, loading_percent: 72.5 }
  ]
};

// Mock grid alerts data
export const mockGridAlerts = {
  scenario_id: "SCN001",
  voltage_violations: [
    { timestamp: "2023-01-10 18:15:00", entity_id: "B0125", entity_type: "bus", value_pu: 0.945, limit_type: "low" },
    { timestamp: "2023-07-15 13:00:00", entity_id: "MV_JCN04", entity_type: "bus", value_pu: 1.052, limit_type: "high" }
  ],
  loading_violations: [
    { timestamp: "2023-01-10 18:30:00", entity_id: "TR002", entity_type: "transformer", loading_percent: 105.6 },
    { timestamp: "2023-01-10 18:45:00", entity_id: "MV_LINE_007", entity_type: "line", loading_percent: 112.1 }
  ],
  summary: {
    total_voltage_violation_hours: 12.5,
    max_transformer_loading_percent: 105.6,
    max_line_loading_percent: 112.1
  }
};

// Mock knowledge graph data
export const mockKnowledgeGraph = {
  nodes: [
    { data: { id: "B0001", label: "Building B0001", type: "Building", year_built: 1935, has_solar: true } },
    { data: { id: "B0002", label: "Building B0002", type: "Building", year_built: 1970, has_solar: false } },
    { data: { id: "B0003", label: "Building B0003", type: "Building", year_built: 1925, has_solar: true } },
    { data: { id: "L001A", label: "Line L001A", type: "Line", length_km: 0.5 } },
    { data: { id: "L001B", label: "Line L001B", type: "Line", length_km: 0.3 } },
    { data: { id: "TR001", label: "Transformer TR001", type: "Transformer", capacity_MVA: 0.5 } },
    { data: { id: "PV_B0001", label: "PV for B0001", type: "PV_System", capacity_kWp: 5.0 } },
    { data: { id: "PV_B0003", label: "PV for B0003", type: "PV_System", capacity_kWp: 7.5 } },
    { data: { id: "BAT_B0003", label: "Battery for B0003", type: "Battery", capacity_kWh: 10.0 } },
    { data: { id: "SCN001", label: "Scenario SCN001", type: "Scenario" } }
  ],
  edges: [
    { data: { id: "e1", source: "B0001", target: "L001A", label: "CONNECTED_TO" } },
    { data: { id: "e2", source: "B0002", target: "L001A", label: "CONNECTED_TO" } },
    { data: { id: "e3", source: "B0003", target: "L001B", label: "CONNECTED_TO" } },
    { data: { id: "e4", source: "L001A", target: "TR001", label: "FEEDS_FROM_TX" } },
    { data: { id: "e5", source: "L001B", target: "TR001", label: "FEEDS_FROM_TX" } },
    { data: { id: "e6", source: "B0001", target: "PV_B0001", label: "HAS_ASSET" } },
    { data: { id: "e7", source: "B0003", target: "PV_B0003", label: "HAS_ASSET" } },
    { data: { id: "e8", source: "B0003", target: "BAT_B0003", label: "HAS_ASSET" } },
    { data: { id: "e9", source: "B0001", target: "SCN001", label: "TARGET_OF_INTERVENTION", intervention_type: "Deep_Retrofit" } }
  ]
};

// Mock cluster results data
export const mockClusterResults = {
  clustering_run_id: "CLRUN001",
  scenario_id: "SCN001",
  clustering_type: "NetLoad",
  num_clusters_k: 5,
  clusters: [
    {
      cluster_label: 0,
      num_buildings: 45,
      description: "High Daytime Net Exporters (High PV, Low Base Load)",
      avg_peak_load_kW: 5.2,
      avg_daily_consumption_kWh: 15.1,
      avg_pv_capacity_kWp: 6.8,
      avg_bouwjaar: 1985,
      dominant_building_type: "Residential",
      representative_building_ids: ["B0001", "B0087", "B0150"],
      avg_load_profile_weekday: [0.5, 0.4, 0.3, 0.2, 0.3, 0.5, 1.0, 1.5, 0.8, 0.2, -1.5, -2.5, -3.0, -2.8, -2.0, -1.0, 0.5, 1.2, 2.0, 2.5, 2.0, 1.5, 1.0, 0.7]
    },
    {
      cluster_label: 1,
      num_buildings: 60,
      description: "Standard Residential (No PV, Evening Peak)",
      avg_peak_load_kW: 8.5,
      avg_daily_consumption_kWh: 22.3,
      avg_pv_capacity_kWp: 0.0,
      avg_bouwjaar: 1965,
      dominant_building_type: "Residential",
      representative_building_ids: ["B0002", "B0045", "B0112"],
      avg_load_profile_weekday: [1.0, 0.8, 0.6, 0.5, 0.6, 1.2, 2.0, 2.5, 1.5, 1.0, 1.2, 1.5, 1.8, 1.5, 1.2, 1.5, 2.5, 4.5, 6.0, 7.0, 6.5, 4.5, 2.5, 1.5]
    },
    {
      cluster_label: 2,
      num_buildings: 35,
      description: "Commercial (Daytime Peak, No PV)",
      avg_peak_load_kW: 35.0,
      avg_daily_consumption_kWh: 450.0,
      avg_pv_capacity_kWp: 0.0,
      avg_bouwjaar: 1990,
      dominant_building_type: "Commercial",
      representative_building_ids: ["B0005", "B0078", "B0201"],
      avg_load_profile_weekday: [5.0, 4.5, 4.0, 4.0, 4.5, 8.0, 15.0, 25.0, 30.0, 32.0, 33.0, 35.0, 34.0, 33.0, 32.0, 30.0, 25.0, 20.0, 15.0, 10.0, 8.0, 7.0, 6.0, 5.5]
    },
    {
      cluster_label: 3,
      num_buildings: 70,
      description: "Older Residential (High Heating Load)",
      avg_peak_load_kW: 12.0,
      avg_daily_consumption_kWh: 35.0,
      avg_pv_capacity_kWp: 2.0,
      avg_bouwjaar: 1945,
      dominant_building_type: "Residential",
      representative_building_ids: ["B0003", "B0056", "B0178"],
      avg_load_profile_weekday: [3.0, 2.8, 2.5, 2.3, 2.5, 3.5, 5.0, 6.0, 4.0, 3.0, 2.5, 2.0, 2.2, 2.0, 2.2, 3.0, 5.0, 8.0, 10.0, 12.0, 10.0, 8.0, 5.0, 3.5]
    },
    {
      cluster_label: 4,
      num_buildings: 40,
      description: "Modern Efficient Buildings (Low Load, Some PV)",
      avg_peak_load_kW: 4.0,
      avg_daily_consumption_kWh: 12.0,
      avg_pv_capacity_kWp: 3.5,
      avg_bouwjaar: 2010,
      dominant_building_type: "Residential",
      representative_building_ids: ["B0004", "B0098", "B0210"],
      avg_load_profile_weekday: [0.3, 0.2, 0.2, 0.2, 0.3, 0.5, 1.0, 1.2, 0.5, 0.0, -1.0, -1.5, -1.8, -1.5, -1.0, -0.5, 0.8, 2.0, 3.0, 4.0, 3.5, 2.0, 1.0, 0.5]
    }
  ]
};

// Mock comparison data
export const mockComparisonData = {
  scenarios: [
    {
      id: "Baseline",
      name: "Baseline",
      color: "#9e9e9e",
      metrics: {
        investment_cost_eur: 0,
        npv_eur: 0,
        payback_period_years: 0,
        avoided_grid_upgrade_cost_eur: 0,
        co2_reduction_pct: 0,
        renewable_energy_share_pct: 10.5,
        voltage_violation_hours: 75.0,
        max_line_loading_pct: 115.0,
        max_transformer_loading_pct: 95.0,
        energy_not_served_kwh: 150.0,
        peak_demand_kw: 1205.7,
        annual_consumption_mwh: 4500.0,
        pv_self_consumption_pct: 85.0,
        annual_pv_generation_mwh: 150.0,
        cost_efficiency: 0,
        carbon_reduction: 0,
        grid_reliability: 25,
        renewable_share: 10
      },
      yearlyMetrics: [
        { year: 2025, co2_emissions_tons: 1200, investment_cost_eur: 0 },
        { year: 2030, co2_emissions_tons: 1200, investment_cost_eur: 0 },
        { year: 2035, co2_emissions_tons: 1200, investment_cost_eur: 0 },
        { year: 2040, co2_emissions_tons: 1200, investment_cost_eur: 0 },
        { year: 2045, co2_emissions_tons: 1200, investment_cost_eur: 0 }
      ]
    },
    {
      id: "SCN001",
      name: "DeepRetro_EV50_PV20",
      color: "#1a73e8",
      metrics: {
        investment_cost_eur: 3500000,
        npv_eur: 800000,
        payback_period_years: 15.5,
        avoided_grid_upgrade_cost_eur: 750000,
        co2_reduction_pct: 45.8,
        renewable_energy_share_pct: 55.2,
        voltage_violation_hours: 5.1,
        max_line_loading_pct: 88.9,
        max_transformer_loading_pct: 92.3,
        energy_not_served_kwh: 0,
        peak_demand_kw: 950.0,
        annual_consumption_mwh: 3800.0,
        pv_self_consumption_pct: 65.0,
        annual_pv_generation_mwh: 350.0,
        cost_efficiency: 60,
        carbon_reduction: 45,
        grid_reliability: 85,
        renewable_share: 55
      },
      yearlyMetrics: [
        { year: 2025, co2_emissions_tons: 1100, investment_cost_eur: 500000 },
        { year: 2030, co2_emissions_tons: 900, investment_cost_eur: 1000000 },
        { year: 2035, co2_emissions_tons: 750, investment_cost_eur: 1500000 },
        { year: 2040, co2_emissions_tons: 650, investment_cost_eur: 2500000 },
        { year: 2045, co2_emissions_tons: 650, investment_cost_eur: 3500000 }
      ]
    },
    {
      id: "RLP001",
      name: "RL Optimized Plan",
      color: "#34a853",
      metrics: {
        investment_cost_eur: 2800000,
        npv_eur: 1200000,
        payback_period_years: 12.0,
        avoided_grid_upgrade_cost_eur: 950000,
        co2_reduction_pct: 60.2,
        renewable_energy_share_pct: 65.8,
        voltage_violation_hours: 2.3,
        max_line_loading_pct: 85.1,
        max_transformer_loading_pct: 88.5,
        energy_not_served_kwh: 0,
        peak_demand_kw: 880.0,
        annual_consumption_mwh: 3500.0,
        pv_self_consumption_pct: 75.0,
        annual_pv_generation_mwh: 420.0,
        cost_efficiency: 80,
        carbon_reduction: 60,
        grid_reliability: 90,
        renewable_share: 65
      },
      yearlyMetrics: [
        { year: 2025, co2_emissions_tons: 1050, investment_cost_eur: 300000 },
        { year: 2030, co2_emissions_tons: 800, investment_cost_eur: 800000 },
        { year: 2035, co2_emissions_tons: 600, investment_cost_eur: 1500000 },
        { year: 2040, co2_emissions_tons: 500, investment_cost_eur: 2200000 },
        { year: 2045, co2_emissions_tons: 480, investment_cost_eur: 2800000 }
      ]
    }
  ]
};

// Predefined scenarios
export const predefinedScenarios = [
  {
    id: "baseline_2025",
    name: "Baseline (2025)",
    description: "Business as usual scenario with current trends",
    interventions: {
      retrofit: { level: "None", target: "none", percentage: 0 },
      ev: { adoption_rate: 10, charging_type: "Uncontrolled" },
      pv: { target_percentage: 15, priority: "Optimal Roofs" },
      battery: { total_capacity_kwh: 0, control_strategy: "None" },
      heatpump: { adoption_rate: 5, type: "Air Source" }
    }
  },
  {
    id: "moderate_2030",
    name: "Moderate Transition (2030)",
    description: "Balanced approach with moderate adoption of clean technologies",
    interventions: {
      retrofit: { level: "Light", target: "percentage", percentage: 30 },
      ev: { adoption_rate: 30, charging_type: "Smart" },
      pv: { target_percentage: 40, priority: "All Suitable" },
      battery: { total_capacity_kwh: 500, control_strategy: "Peak Shaving" },
      heatpump: { adoption_rate: 25, type: "Mixed" }
    }
  },
  {
    id: "ambitious_2040",
    name: "Ambitious Transition (2040)",
    description: "Aggressive adoption of clean technologies and retrofits",
    interventions: {
      retrofit: { level: "Deep", target: "percentage", percentage: 70 },
      ev: { adoption_rate: 80, charging_type: "V2G" },
      pv: { target_percentage: 90, priority: "Maximum Coverage" },
      battery: { total_capacity_kwh: 2000, control_strategy: "Full Smart" },
      heatpump: { adoption_rate: 85, type: "Ground Source" }
    }
  }
];

// Intervention options
export const interventionOptions = {
  retrofit: {
    levels: [
      { id: "none", name: "None", description: "No retrofits applied" },
      { id: "light", name: "Light", description: "Basic insulation and window upgrades", energy_savings_pct: 15, cost_per_m2: 50 },
      { id: "moderate", name: "Moderate", description: "Comprehensive insulation, windows, and basic HVAC", energy_savings_pct: 35, cost_per_m2: 120 },
      { id: "deep", name: "Deep", description: "Full building envelope and system upgrade", energy_savings_pct: 60, cost_per_m2: 250 }
    ],
    targets: [
      { id: "none", name: "None" },
      { id: "all", name: "All Buildings" },
      { id: "percentage", name: "Percentage of Buildings" },
      { id: "age", name: "By Building Age", options: ["Pre-1945", "1945-1970", "1971-1990", "Post-1990"] },
      { id: "type", name: "By Building Type", options: ["Residential", "Commercial", "Industrial", "Public"] }
    ],
    buildingSelection: {
      filters: [
        { id: "age", name: "Building Age", type: "range" },
        { id: "type", name: "Building Type", type: "select" },
        { id: "area", name: "Floor Area", type: "range" },
        { id: "consumption", name: "Energy Consumption", type: "range" }
      ]
    }
  },
  solarPV: {
    systemTypes: [
      { id: "residential", name: "Residential", typical_size_range: [3, 10], cost_per_kwp: 1200 },
      { id: "commercial", name: "Commercial", typical_size_range: [10, 100], cost_per_kwp: 1000 },
      { id: "industrial", name: "Industrial", typical_size_range: [100, 500], cost_per_kwp: 800 }
    ],
    roofSelection: {
      criteria: [
        { id: "orientation", name: "Orientation", options: ["South", "SE/SW", "E/W"] },
        { id: "shading", name: "Shading", options: ["Minimal", "Moderate", "Significant"] },
        { id: "structural", name: "Structural Suitability", options: ["High", "Medium", "Low"] }
      ]
    },
    deploymentStrategies: [
      { id: "optimal", name: "Optimal Roofs Only", description: "Focus on best performing locations" },
      { id: "balanced", name: "Balanced Distribution", description: "Mix of locations for grid stability" },
      { id: "maximum", name: "Maximum Coverage", description: "Install on all suitable surfaces" }
    ]
  },
  batteryStorage: {
    systemTypes: [
      { id: "residential", name: "Residential", size_range: [5, 20], cost_per_kwh: 800 },
      { id: "commercial", name: "Commercial", size_range: [20, 100], cost_per_kwh: 700 },
      { id: "community", name: "Community", size_range: [100, 500], cost_per_kwh: 600 }
    ],
    controlStrategies: [
      { id: "basic", name: "Basic Self-Consumption", description: "Simple charge during surplus, discharge during deficit" },
      { id: "tou", name: "Time-of-Use Optimization", description: "Optimize for time-varying electricity prices" },
      { id: "peak", name: "Peak Shaving", description: "Focus on reducing demand peaks" },
      { id: "advanced", name: "Advanced Grid Services", description: "Participate in grid balancing services" }
    ],
    placementStrategies: [
      { id: "distributed", name: "Distributed", description: "Even distribution across network" },
      { id: "targeted", name: "Targeted", description: "Focus on grid constraint locations" },
      { id: "clustered", name: "Clustered", description: "Group storage for better control" }
    ]
  },
  heatPumps: {
    systemTypes: [
      { id: "air_source", name: "Air Source", cop_range: [2.5, 3.5], cost_per_kw: 1000 },
      { id: "ground_source", name: "Ground Source", cop_range: [3.5, 4.5], cost_per_kw: 2000 },
      { id: "hybrid", name: "Hybrid System", description: "Combined with existing boiler", cost_per_kw: 1200 }
    ],
    buildingCriteria: [
      { id: "insulation", name: "Insulation Level", options: ["High", "Medium", "Low"] },
      { id: "space", name: "Available Space", options: ["Adequate", "Limited", "Very Limited"] },
      { id: "current_system", name: "Current Heating System", options: ["Gas Boiler", "Electric", "Oil", "Other"] }
    ],
    controlStrategies: [
      { id: "basic", name: "Basic Thermostat", description: "Simple temperature control" },
      { id: "smart", name: "Smart Control", description: "Weather prediction and learning" },
      { id: "grid", name: "Grid-responsive", description: "Responds to grid signals" }
    ]
  },
  evCharging: {
    chargingTypes: [
      { id: "home", name: "Home Charging", power_range: [3.7, 7.4], cost_per_point: 1000 },
      { id: "workplace", name: "Workplace Charging", power_range: [7.4, 22], cost_per_point: 2500 },
      { id: "public_fast", name: "Public Fast Charging", power_range: [50, 150], cost_per_point: 35000 }
    ],
    controlStrategies: [
      { id: "uncontrolled", name: "Uncontrolled", description: "Charge on plug-in" },
      { id: "smart", name: "Smart Charging", description: "Time and power optimization" },
      { id: "v2g", name: "Vehicle-to-Grid", description: "Bidirectional power flow" }
    ],
    infrastructurePlanning: [
      { id: "distributed", name: "Distributed Coverage", description: "Even distribution of chargers" },
      { id: "demand_based", name: "Demand-Based", description: "Focus on high-demand areas" },
      { id: "phased", name: "Phased Rollout", description: "Gradual expansion based on adoption" }
    ]
  }
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\AdvancedAnalytics.tsx
============================================================
import React, { useState, useContext } from 'react';
import { useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Brain, BarChart2, Clock, Info } from 'lucide-react';
import MapComponent from '../components/MapComponent';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { mockClusterResults } from '../data/mockData';

export const AdvancedAnalytics: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const { scenarios, setClusterResults } = useContext(AppContext);
  const [clusteringType, setClusteringType] = useState<string>('NetLoad');
  const [numClusters, setNumClusters] = useState<number>(5);
  const [selectedScenario, setSelectedScenario] = useState<string>(scenarios[0]?.scenario_id || '');
  const [isRunning, setIsRunning] = useState<boolean>(false);
  const [progress, setProgress] = useState<number>(0);
  const [stage, setStage] = useState<string>('');
  const [selectedCluster, setSelectedCluster] = useState<number | null>(null);
  
  const handleRunClustering = () => {
    setIsRunning(true);
    setProgress(0);
    setStage('Preparing graph data...');
    
    // Simulate the progress of the clustering analysis
    const stages = [
      "Preparing graph data...",
      "Extracting node features...",
      "Training GNN / Generating Embeddings...",
      "Performing Clustering...",
      "Visualizing results..."
    ];
    
    let currentStageIndex = 0;
    
    const interval = setInterval(() => {
      if (currentStageIndex < stages.length - 1) {
        currentStageIndex++;
        setStage(stages[currentStageIndex]);
        setProgress(Math.round((currentStageIndex / (stages.length - 1)) * 100));
      } else {
        clearInterval(interval);
        setProgress(100);
        setStage("Clustering complete!");
        
        // Set mock cluster results
        setClusterResults(mockClusterResults);
        
        setTimeout(() => {
          setIsRunning(false);
        }, 1000);
      }
    }, 1500);
  };
  
  const COLORS = ['#1a73e8', '#34a853', '#fbbc04', '#ea4335', '#9334e6', '#00acc1'];
  
  const renderClusterDetails = () => {
    if (selectedCluster === null || !mockClusterResults) return null;
    
    const cluster = mockClusterResults.clusters.find(c => c.cluster_label === selectedCluster);
    if (!cluster) return null;
    
    // Mock load profile data
    const loadProfileData = Array.from({ length: 24 }, (_, i) => ({
      hour: i,
      load: cluster.avg_load_profile_weekday[i]
    }));
    
    // Mock building type distribution
    const buildingTypeData = [
      { name: 'Residential', value: 70 },
      { name: 'Commercial', value: 20 },
      { name: 'Industrial', value: 10 }
    ];
    
    return (
      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <h2 className="text-lg font-semibold text-gray-900">Cluster {selectedCluster} Details</h2>
        </div>
        
        <div className="p-4">
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Description</h3>
            <p className="text-sm text-gray-600">{cluster.description}</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-2">Key Metrics</h3>
              <div className="space-y-2">
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-sm font-medium text-gray-500">Buildings:</span>
                  <span className="text-sm text-gray-900">{cluster.num_buildings}</span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-sm font-medium text-gray-500">Avg. Peak Load:</span>
                  <span className="text-sm text-gray-900">{cluster.avg_peak_load_kW} kW</span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-sm font-medium text-gray-500">Avg. Daily Consumption:</span>
                  <span className="text-sm text-gray-900">{cluster.avg_daily_consumption_kWh} kWh</span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-sm font-medium text-gray-500">Avg. PV Capacity:</span>
                  <span className="text-sm text-gray-900">{cluster.avg_pv_capacity_kWp} kWp</span>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-sm font-medium text-gray-500">Avg. Building Year:</span>
                  <span className="text-sm text-gray-900">{cluster.avg_bouwjaar}</span>
                </div>
              </div>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-2">Building Type Distribution</h3>
              <div className="h-40">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={buildingTypeData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={60}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {buildingTypeData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
          
          <div>
            <h3 className="text-sm font-medium text-gray-700 mb-2">Average Load Profile (Weekday)</h3>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={loadProfileData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="hour" label={{ value: 'Hour of Day', position: 'insideBottom', offset: -5 }} />
                  <YAxis label={{ value: 'Load (kW)', angle: -90, position: 'insideLeft' }} />
                  <Tooltip />
                  <Line type="monotone" dataKey="load" stroke="#1a73e8" activeDot={{ r: 8 }} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
          
          <div className="mt-4">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Representative Buildings</h3>
            <div className="bg-gray-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">
                {cluster.representative_building_ids.join(', ')}
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Advanced GNN-based Clustering Analysis</h1>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
              <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 className="font-semibold text-gray-900 flex items-center">
                  <Brain className="h-5 w-5 text-blue-600 mr-2" />
                  Clustering Configuration
                </h2>
              </div>
              
              <div className="p-4">
                <div className="space-y-4">
                  <div>
                    <label htmlFor="clustering-type" className="block text-sm font-medium text-gray-700 mb-1">
                      Clustering Type
                    </label>
                    <select
                      id="clustering-type"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      value={clusteringType}
                      onChange={(e) => setClusteringType(e.target.value)}
                    >
                      <option value="NetLoad">Net-Load Pattern Clustering</option>
                      <option value="RetrofitPotential">Retrofit Potential Clustering</option>
                      <option value="GridStress">Grid Stress Contribution Clustering</option>
                      <option value="Combined">Combined Feature Clustering</option>
                    </select>
                  </div>
                  
                  <div>
                    <label htmlFor="num-clusters" className="block text-sm font-medium text-gray-700 mb-1">
                      Number of Clusters (K)
                    </label>
                    <input
                      type="number"
                      id="num-clusters"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      min="2"
                      max="10"
                      value={numClusters}
                      onChange={(e) => setNumClusters(parseInt(e.target.value))}
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="scenario-context" className="block text-sm font-medium text-gray-700 mb-1">
                      Scenario Context
                    </label>
                    <select
                      id="scenario-context"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      value={selectedScenario}
                      onChange={(e) => setSelectedScenario(e.target.value)}
                    >
                      {scenarios.length > 0 ? (
                        scenarios.map((scenario) => (
                          <option key={scenario.scenario_id} value={scenario.scenario_id}>
                            {scenario.scenario_name}
                          </option>
                        ))
                      ) : (
                        <option value="">No scenarios available</option>
                      )}
                    </select>
                  </div>
                  
                  <button
                    className={`w-full py-2 px-4 rounded-md font-medium flex items-center justify-center ${
                      isRunning 
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                    onClick={handleRunClustering}
                    disabled={isRunning || !selectedScenario}
                  >
                    <Brain className="h-4 w-4 mr-2" />
                    Run Clustering Analysis
                  </button>
                </div>
              </div>
            </div>
            
            {isRunning && (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <Clock className="h-5 w-5 text-blue-600 mr-2" />
                    Analysis Progress
                  </h2>
                </div>
                
                <div className="p-4">
                  <p className="text-sm text-gray-600 mb-2">{stage}</p>
                  
                  <div className="w-full bg-gray-200 rounded-full h-4 mb-4">
                    <div 
                      className="bg-blue-600 h-4 rounded-full transition-all duration-500 ease-out"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
            
            {mockClusterResults && !isRunning && (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Cluster Summary
                  </h2>
                </div>
                
                <div className="p-4">
                  <ul className="space-y-2">
                    {mockClusterResults.clusters.map((cluster) => (
                      <li 
                        key={cluster.cluster_label}
                        className={`p-3 rounded-md cursor-pointer ${
                          selectedCluster === cluster.cluster_label 
                            ? 'bg-blue-100 border border-blue-200' 
                            : 'bg-gray-50 border border-gray-200 hover:bg-blue-50'
                        }`}
                        onClick={() => setSelectedCluster(cluster.cluster_label)}
                      >
                        <div className="flex items-center">
                          <div 
                            className="w-4 h-4 rounded-full mr-2" 
                            style={{ backgroundColor: COLORS[cluster.cluster_label % COLORS.length] }}
                          ></div>
                          <div>
                            <p className="font-medium text-gray-900">Cluster {cluster.cluster_label}</p>
                            <p className="text-xs text-gray-500">{cluster.num_buildings} buildings</p>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mt-1 truncate">{cluster.description}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
          
          <div className="lg:col-span-2">
            {mockClusterResults && !isRunning ? (
              <>
                <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
                  <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                    <h2 className="font-semibold text-gray-900">Cluster Visualization</h2>
                  </div>
                  
                  <div className="p-4">
                    <div className="h-96 border border-gray-200 rounded-lg overflow-hidden">
                      <MapComponent 
                        selectedFeeder={districtId} 
                        onFeederSelect={() => {}} // Read-only in this view
                      />
                      {/* In a real implementation, buildings would be colored by cluster */}
                    </div>
                    
                    <div className="flex mt-4 space-x-4">
                      <div className="flex-1">
                        <h3 className="text-sm font-medium text-gray-700 mb-2">Cluster Legend</h3>
                        <div className="space-y-1">
                          {mockClusterResults.clusters.map((cluster) => (
                            <div key={cluster.cluster_label} className="flex items-center space-x-2">
                              <div 
                                className="w-4 h-4 rounded-full" 
                                style={{ backgroundColor: COLORS[cluster.cluster_label % COLORS.length] }}
                              ></div>
                              <span className="text-xs text-gray-600">Cluster {cluster.cluster_label}: {cluster.description}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {selectedCluster !== null ? (
                  renderClusterDetails()
                ) : (
                  <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 flex items-center justify-center h-64">
                    <div className="text-center">
                      <Info className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500">Select a cluster to view details</p>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 flex items-center justify-center h-96">
                <div className="text-center">
                  <Brain className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">GNN-based Clustering</h3>
                  <p className="text-gray-500 max-w-md mx-auto">
                    Configure and run the clustering analysis to group buildings based on similar characteristics.
                    This helps identify patterns and optimize interventions for grid planning.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\ComparisonDashboard.tsx
============================================================
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { BarChart2, Download, FileText } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { mockComparisonData } from '../data/mockData';

export const ComparisonDashboard: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const [activeTab, setActiveTab] = useState('economic');
  const [selectedScenarios, setSelectedScenarios] = useState<string[]>(['Baseline', 'SCN001', 'RLP001']);
  
  const handleScenarioToggle = (scenarioId: string) => {
    if (selectedScenarios.includes(scenarioId)) {
      setSelectedScenarios(selectedScenarios.filter(id => id !== scenarioId));
    } else {
      setSelectedScenarios([...selectedScenarios, scenarioId]);
    }
  };
  
  // Filter data based on selected scenarios
  const filteredData = {
    ...mockComparisonData,
    scenarios: mockComparisonData.scenarios.filter(s => selectedScenarios.includes(s.id))
  };
  
  // Prepare data for charts
  const prepareBarChartData = (metric: string) => {
    return filteredData.scenarios.map(scenario => ({
      name: scenario.name,
      value: scenario.metrics[metric as keyof typeof scenario.metrics],
      fill: scenario.color
    }));
  };
  
  const prepareLineChartData = (metric: string) => {
    const data: any[] = [];
    
    // For each year in the planning horizon
    for (let year = 2025; year <= 2045; year += 5) {
      const yearData: any = { year };
      
      // Add a value for each scenario
      filteredData.scenarios.forEach(scenario => {
        const yearlyMetrics = scenario.yearlyMetrics.find(ym => ym.year === year);
        if (yearlyMetrics) {
          yearData[scenario.id] = yearlyMetrics[metric as keyof typeof yearlyMetrics];
        }
      });
      
      data.push(yearData);
    }
    
    return data;
  };
  
  const prepareRadarData = () => {
    // Normalize all metrics to a 0-100 scale for radar chart
    const metrics = ['cost_efficiency', 'carbon_reduction', 'grid_reliability', 'renewable_share'];
    
    return filteredData.scenarios.map(scenario => {
      const radarData: any = { name: scenario.name };
      
      metrics.forEach(metric => {
        // Simple normalization - in a real app this would be more sophisticated
        const value = scenario.metrics[metric as keyof typeof scenario.metrics];
        radarData[metric] = value;
      });
      
      return radarData;
    });
  };
  
  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Scenario Comparison & Decision Dashboard</h1>
          <div className="flex space-x-2">
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-md font-medium flex items-center">
              <Download className="h-4 w-4 mr-2" />
              Export Data
            </button>
            <button className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 flex items-center">
              <FileText className="h-4 w-4 mr-2" />
              Generate Report
            </button>
          </div>
        </div>
        
        <div className="bg-gray-50 rounded-lg p-4 border border-gray-200 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-3">Select Scenarios to Compare</h2>
          <div className="flex flex-wrap gap-3">
            {mockComparisonData.scenarios.map(scenario => (
              <label 
                key={scenario.id}
                className={`flex items-center px-3 py-2 rounded-md cursor-pointer ${
                  selectedScenarios.includes(scenario.id) 
                    ? 'bg-blue-100 border border-blue-200' 
                    : 'bg-white border border-gray-200 hover:bg-blue-50'
                }`}
              >
                <input
                  type="checkbox"
                  className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                  checked={selectedScenarios.includes(scenario.id)}
                  onChange={() => handleScenarioToggle(scenario.id)}
                />
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: scenario.color }}
                  ></div>
                  <span className="text-sm">{scenario.name}</span>
                </div>
              </label>
            ))}
          </div>
        </div>
        
        <div className="flex border-b border-gray-200 mb-6">
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'economic' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('economic')}
          >
            Economic Metrics
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'environmental' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('environmental')}
          >
            Environmental Metrics
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'grid' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('grid')}
          >
            Grid Reliability Metrics
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'energy' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('energy')}
          >
            Energy System Metrics
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'overview' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('overview')}
          >
            Multi-KPI Overview
          </button>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {activeTab === 'economic' && (
            <>
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Total Investment Cost (€)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('investment_cost_eur')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `€${value.toLocaleString()}`} />
                        <Bar dataKey="value" name="Investment Cost" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Net Present Value (€)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('npv_eur')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `€${value.toLocaleString()}`} />
                        <Bar dataKey="value" name="Net Present Value" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Payback Period (Years)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('payback_period_years')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} years`} />
                        <Bar dataKey="value" name="Payback Period" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Avoided Grid Upgrade Cost (€)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('avoided_grid_upgrade_cost_eur')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `€${value.toLocaleString()}`} />
                        <Bar dataKey="value" name="Avoided Grid Upgrade Cost" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            </>
          )}
          
          {activeTab === 'environmental' && (
            <>
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    CO₂ Reduction vs Baseline (%)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('co2_reduction_pct')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                        <Bar dataKey="value" name="CO₂ Reduction" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Renewable Energy Share (%)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('renewable_energy_share_pct')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                        <Bar dataKey="value" name="Renewable Energy Share" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden lg:col-span-2">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    CO₂ Emissions Over Time
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={prepareLineChartData('co2_emissions_tons')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="year" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toLocaleString()} tons`} />
                        <Legend />
                        {filteredData.scenarios.map(scenario => (
                          <Line 
                            key={scenario.id}
                            type="monotone" 
                            dataKey={scenario.id} 
                            name={scenario.name} 
                            stroke={scenario.color} 
                            activeDot={{ r: 8 }} 
                          />
                        ))}
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            </>
          )}
          
          {activeTab === 'grid' && (
            <>
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Voltage Violation Hours per Year
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('voltage_violation_hours')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} hours`} />
                        <Bar dataKey="value" name="Violation Hours" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Maximum Line Loading (%)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('max_line_loading_pct')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                        <Bar dataKey="value" name="Max Line Loading" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Maximum Transformer Loading (%)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('max_transformer_loading_pct')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                        <Bar dataKey="value" name="Max Transformer Loading" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Energy Not Served (kWh/year)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('energy_not_served_kwh')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} kWh`} />
                        <Bar dataKey="value" name="Energy Not Served" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            </>
          )}
          
          {activeTab === 'energy' && (
            <>
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Peak Demand (kW)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('peak_demand_kw')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} kW`} />
                        <Bar dataKey="value" name="Peak Demand" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Annual Energy Consumption (MWh)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('annual_consumption_mwh')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} MWh`} />
                        <Bar dataKey="value" name="Energy Consumption" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    PV Self-Consumption (%)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('pv_self_consumption_pct')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                        <Bar dataKey="value" name="Self-Consumption" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Annual PV Generation (MWh)
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={prepareBarChartData('annual_pv_generation_mwh')}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip formatter={(value) => `${value.toFixed(1)} MWh`} />
                        <Bar dataKey="value" name="PV Generation" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            </>
          )}
          
          {activeTab === 'overview' && (
            <>
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <BarChart2 className="h-5 w-5 text-blue-600 mr-2" />
                    Multi-KPI Comparison
                  </h2>
                </div>
                
                <div className="p-4">
                  <div className="h-96">
                    <ResponsiveContainer width="100%" height="100%">
                      <RadarChart outerRadius={90} data={prepareRadarData()}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="name" />
                        <PolarRadiusAxis angle={30} domain={[0, 100]} />
                        {filteredData.scenarios.map(scenario => (
                          <Radar 
                            key={scenario.id}
                            name={scenario.name} 
                            dataKey={scenario.id} 
                            stroke={scenario.color} 
                            fill={scenario.color} 
                            fillOpacity={0.2} 
                          />
                        ))}
                        <Legend />
                        <Tooltip />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900">Summary Table</h2>
                </div>
                
                <div className="p-4">
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">KPI Metric</th>
                          {filteredData.scenarios.map(scenario => (
                            <th key={scenario.id} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              {scenario.name}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Total Investment Cost (€M)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(scenario.metrics.investment_cost_eur / 1000000).toFixed(1)}
                            </td>
                          ))}
                        </tr>
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">CO₂ Reduction vs Baseline (%)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {scenario.metrics.co2_reduction_pct.toFixed(1)}%
                            </td>
                          ))}
                        </tr>
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Max Line Loading (%)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {scenario.metrics.max_line_loading_pct.toFixed(1)}%
                            </td>
                          ))}
                        </tr>
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Voltage Violation Hours (p.a.)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {scenario.metrics.voltage_violation_hours.toFixed(1)}
                            </td>
                          ))}
                        </tr>
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Renewable Energy Share (%)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {scenario.metrics.renewable_energy_share_pct.toFixed(1)}%
                            </td>
                          ))}
                        </tr>
                        <tr>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Net Present Value (€M)</td>
                          {filteredData.scenarios.map(scenario => (
                            <td key={scenario.id} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(scenario.metrics.npv_eur / 1000000).toFixed(1)}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\DataExplorer.tsx
============================================================
import React, { useState, useContext } from 'react';
import { useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Search, Filter, Download, Info } from 'lucide-react';
import { mockBuildings, mockGridLines, mockTransformers, mockDERAssets } from '../data/mockData';

export const DataExplorer: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const { districtScope } = useContext(AppContext);
  const [activeTab, setActiveTab] = useState('buildings');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFilters, setSelectedFilters] = useState<Record<string, string[]>>({
    building_type: [],
    age_range: [],
    retrofit_status: [],
    has_solar: []
  });
  const [selectedItem, setSelectedItem] = useState<any>(null);

  // Filter data based on search query and selected filters
  const getFilteredData = () => {
    let data;
    
    switch (activeTab) {
      case 'buildings':
        data = mockBuildings;
        break;
      case 'grid':
        data = mockGridLines;
        break;
      case 'transformers':
        data = mockTransformers;
        break;
      case 'der':
        data = mockDERAssets;
        break;
      default:
        data = [];
    }
    
    // Apply search filter
    if (searchQuery) {
      data = data.filter((item: any) => 
        Object.values(item).some(
          value => value && value.toString().toLowerCase().includes(searchQuery.toLowerCase())
        )
      );
    }
    
    // Apply selected filters (only for buildings tab)
    if (activeTab === 'buildings' && Object.values(selectedFilters).some(arr => arr.length > 0)) {
      data = data.filter((building: any) => {
        return Object.entries(selectedFilters).every(([key, values]) => {
          if (values.length === 0) return true;
          
          if (key === 'has_solar') {
            return values.includes(building[key] ? 'Yes' : 'No');
          }
          
          return values.includes(building[key]);
        });
      });
    }
    
    return data;
  };

  const filteredData = getFilteredData();

  const handleItemClick = (item: any) => {
    setSelectedItem(item);
  };

  const renderDetailPanel = () => {
    if (!selectedItem) return null;
    
    return (
      <div className="bg-white rounded-lg shadow-md p-4 border-l-4 border-blue-500">
        <div className="flex justify-between items-start mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            {activeTab === 'buildings' ? `Building ${selectedItem.building_id}` :
             activeTab === 'grid' ? `Line ${selectedItem.line_id}` :
             activeTab === 'transformers' ? `Transformer ${selectedItem.transformer_id}` :
             `Asset ${selectedItem.building_id}`}
          </h3>
          <button 
            className="text-gray-400 hover:text-gray-500"
            onClick={() => setSelectedItem(null)}
          >
            <span className="sr-only">Close</span>
            <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="space-y-3">
          {Object.entries(selectedItem).map(([key, value]) => (
            <div key={key} className="grid grid-cols-2 gap-2">
              <span className="text-sm font-medium text-gray-500">{key.replace(/_/g, ' ')}:</span>
              <span className="text-sm text-gray-900">{value?.toString()}</span>
            </div>
          ))}
        </div>
        
        {activeTab === 'buildings' && (
          <div className="mt-4 pt-4 border-t border-gray-200">
            <h4 className="text-sm font-medium text-gray-700 mb-2">Local Connectivity</h4>
            <div className="bg-gray-50 p-3 rounded-md text-xs">
              <p>Building {selectedItem.building_id} → Line {selectedItem.line_id} → Feeder {selectedItem.feeder_id}</p>
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">District Data Explorer</h1>
          <div className="flex space-x-2">
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-md font-medium flex items-center">
              <Download className="h-4 w-4 mr-2" />
              Export Data
            </button>
          </div>
        </div>
        
        <div className="flex border-b border-gray-200 mb-6">
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'buildings' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('buildings')}
          >
            Buildings
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'grid' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('grid')}
          >
            Grid Network
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'transformers' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('transformers')}
          >
            Feeders & Transformers
          </button>
          <button
            className={`py-3 px-4 font-medium text-sm ${activeTab === 'der' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('der')}
          >
            Generation & Storage Assets
          </button>
        </div>
        
        <div className="flex mb-4">
          <div className="relative flex-1 mr-4">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder={`Search ${activeTab}...`}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          {activeTab === 'buildings' && (
            <div className="relative">
              <button
                className="bg-white border border-gray-300 rounded-md py-2 px-4 flex items-center text-gray-700 hover:bg-gray-50"
              >
                <Filter className="h-4 w-4 mr-2" />
                Filters
              </button>
              
              {/* Filter dropdown would go here in a real implementation */}
            </div>
          )}
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      {activeTab === 'buildings' && (
                        <>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Building ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Year Built</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Area (m²)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Peak Load (kW)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Has Solar</th>
                        </>
                      )}
                      
                      {activeTab === 'grid' && (
                        <>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Line ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">From Node</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">To Node</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Voltage Level</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Length (km)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Capacity (A)</th>
                        </>
                      )}
                      
                      {activeTab === 'transformers' && (
                        <>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Transformer ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Feeder ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Capacity (MVA)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Primary (kV)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Secondary (kV)</th>
                        </>
                      )}
                      
                      {activeTab === 'der' && (
                        <>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Building ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Solar Capacity (kWp)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Battery Capacity (kWh)</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Battery Power (kW)</th>
                        </>
                      )}
                      
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredData.map((item: any, index: number) => (
                      <tr 
                        key={index}
                        className={`hover:bg-blue-50 cursor-pointer ${selectedItem === item ? 'bg-blue-50' : ''}`}
                        onClick={() => handleItemClick(item)}
                      >
                        {activeTab === 'buildings' && (
                          <>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.building_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.building_type}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.bouwjaar}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.area_m2}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.peak_load_kW}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.has_solar ? 'Yes' : 'No'}</td>
                          </>
                        )}
                        
                        {activeTab === 'grid' && (
                          <>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.line_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.from_node_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.to_node_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.voltage_level}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.length_km}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.capacity_rating_A}</td>
                          </>
                        )}
                        
                        {activeTab === 'transformers' && (
                          <>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.transformer_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.feeder_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.capacity_MVA}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.primary_voltage_kV}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.secondary_voltage_kV}</td>
                          </>
                        )}
                        
                        {activeTab === 'der' && (
                          <>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.building_id}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.building_type}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.solar_capacity_kWp}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.battery_capacity_kWh || 'N/A'}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.battery_power_kW || 'N/A'}</td>
                          </>
                        )}
                        
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button className="text-blue-600 hover:text-blue-900">
                            <Info className="h-4 w-4" />
                            <span className="sr-only">View details</span>
                          </button>
                        </td>
                      </tr>
                    ))}
                    
                    {filteredData.length === 0 && (
                      <tr>
                        <td colSpan={7} className="px-6 py-4 text-center text-sm text-gray-500">
                          No data found matching your criteria
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
              
              <div className="bg-gray-50 px-4 py-3 border-t border-gray-200 sm:px-6">
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-700">
                    Showing <span className="font-medium">{filteredData.length}</span> results
                  </div>
                  <div className="flex-1 flex justify-center sm:justify-end">
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                      <a href="#" className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span className="sr-only">Previous</span>
                        <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </a>
                      <a href="#" className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">1</a>
                      <a href="#" className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span className="sr-only">Next</span>
                        <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                        </svg>
                      </a>
                    </nav>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="lg:col-span-1">
            {selectedItem ? (
              renderDetailPanel()
            ) : (
              <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 h-full flex items-center justify-center">
                <div className="text-center">
                  <Info className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-gray-500">Select an item to view details</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\GridAnalysis.tsx
============================================================
import React, { useState, useEffect, useContext } from 'react';
import { useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Clock, AlertTriangle, Download, Info } from 'lucide-react';
import MapComponent from '../components/MapComponent';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { mockGridResults, mockGridAlerts } from '../data/mockData';

export const GridAnalysis: React.FC = () => {
  const { districtId, scenarioId } = useParams<{ districtId: string, scenarioId: string }>();
  const { scenarios, simulationResults, setGridResults } = useContext(AppContext);
  const [currentScenario, setCurrentScenario] = useState<any>(null);
  const [selectedTime, setSelectedTime] = useState<string>("2023-07-15 12:00:00");
  const [selectedEntity, setSelectedEntity] = useState<any>(null);
  const [timeSeriesData, setTimeSeriesData] = useState<any[]>([]);
  const [gridAlerts, setGridAlerts] = useState<any>(null);
  const [showVoltageLayer, setShowVoltageLayer] = useState<boolean>(true);
  const [showLoadingLayer, setShowLoadingLayer] = useState<boolean>(true);
  const [showOverloadsOnly, setShowOverloadsOnly] = useState<boolean>(false);

  useEffect(() => {
    if (scenarioId && scenarios.length > 0) {
      const scenario = scenarios.find(s => s.scenario_id === scenarioId);
      if (scenario) {
        setCurrentScenario(scenario);
      }
    }
  }, [scenarioId, scenarios]);

  useEffect(() => {
    // In a real app, we would fetch grid results from the backend
    // Here we're using mock data
    setGridResults(mockGridResults);
    setGridAlerts(mockGridAlerts);
    
    // Generate mock time series data for the selected entity
    const mockTimeSeries = Array.from({ length: 24 }, (_, i) => ({
      time: `${i.toString().padStart(2, '0')}:00`,
      loading: Math.random() * 60 + 20, // Random value between 20 and 80
      voltage: 0.95 + Math.random() * 0.1 // Random value between 0.95 and 1.05
    }));
    
    setTimeSeriesData(mockTimeSeries);
  }, [setGridResults]);

  const handleEntityClick = (entity: any) => {
    setSelectedEntity(entity);
    
    // In a real app, we would fetch time series data for this entity
    // Here we're just using the mock data we already generated
  };

  const getVoltageColor = (voltage: number) => {
    if (voltage < 0.95) return '#ea4335'; // Red for low voltage
    if (voltage > 1.05) return '#ea4335'; // Red for high voltage
    if (voltage < 0.98 || voltage > 1.02) return '#fbbc04'; // Yellow for borderline
    return '#34a853'; // Green for good
  };

  const getLoadingColor = (loading: number) => {
    if (loading > 100) return '#ea4335'; // Red for overload
    if (loading > 80) return '#fbbc04'; // Yellow for high loading
    return '#34a853'; // Green for normal
  };

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Grid Impact Analysis</h1>
            <p className="text-gray-600">Scenario: {currentScenario?.scenario_name}</p>
          </div>
          <button
            className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 flex items-center"
          >
            <Download className="h-4 w-4 mr-2" />
            Export Results
          </button>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
              <div className="px-6 py-4 border-b border-gray-200 bg-gray-50 flex justify-between items-center">
                <h2 className="text-lg font-semibold text-gray-900">Grid Visualization</h2>
                <div className="flex space-x-4">
                  <label className="flex items-center text-sm">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={showVoltageLayer}
                      onChange={() => setShowVoltageLayer(!showVoltageLayer)}
                    />
                    Voltage
                  </label>
                  <label className="flex items-center text-sm">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={showLoadingLayer}
                      onChange={() => setShowLoadingLayer(!showLoadingLayer)}
                    />
                    Loading
                  </label>
                  <label className="flex items-center text-sm">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={showOverloadsOnly}
                      onChange={() => setShowOverloadsOnly(!showOverloadsOnly)}
                    />
                    Overloads Only
                  </label>
                </div>
              </div>
              
              <div className="p-4">
                <div className="flex items-center mb-4">
                  <Clock className="h-5 w-5 text-gray-400 mr-2" />
                  <span className="text-sm text-gray-700 mr-2">Time:</span>
                  <select
                    className="block w-48 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    value={selectedTime}
                    onChange={(e) => setSelectedTime(e.target.value)}
                  >
                    <option value="2023-07-15 12:00:00">July 15, 12:00 (Summer Peak)</option>
                    <option value="2023-01-10 18:00:00">January 10, 18:00 (Winter Peak)</option>
                    <option value="2023-04-20 08:00:00">April 20, 08:00 (Spring Morning)</option>
                  </select>
                </div>
                
                <div className="h-96 border border-gray-200 rounded-lg overflow-hidden">
                  <MapComponent 
                    selectedFeeder={districtId} 
                    onFeederSelect={() => {}} // Read-only in this view
                  />
                  {/* In a real implementation, this would be a specialized grid map with colored lines/nodes */}
                </div>
                
                <div className="flex mt-4 space-x-4">
                  <div className="flex-1">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Voltage Legend</h3>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#ea4335' }}></div>
                      <span className="text-xs text-gray-600">Out of range (&lt;0.95 or &gt;1.05 pu)</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#fbbc04' }}></div>
                      <span className="text-xs text-gray-600">Borderline (0.95-0.98 or 1.02-1.05 pu)</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#34a853' }}></div>
                      <span className="text-xs text-gray-600">Normal (0.98-1.02 pu)</span>
                    </div>
                  </div>
                  
                  <div className="flex-1">
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Loading Legend</h3>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#ea4335' }}></div>
                      <span className="text-xs text-gray-600">Overload (&gt;100%)</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#fbbc04' }}></div>
                      <span className="text-xs text-gray-600">High Loading (80-100%)</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 rounded-full" style={{ backgroundColor: '#34a853' }}></div>
                      <span className="text-xs text-gray-600">Normal Loading (&lt;80%)</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {selectedEntity && (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="text-lg font-semibold text-gray-900">Time Series Data: {selectedEntity.entity_id}</h2>
                </div>
                
                <div className="p-4">
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={timeSeriesData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="time" />
                        <YAxis yAxisId="left" orientation="left" label={{ value: 'Loading (%)', angle: -90, position: 'insideLeft' }} />
                        <YAxis yAxisId="right" orientation="right" domain={[0.9, 1.1]} label={{ value: 'Voltage (pu)', angle: 90, position: 'insideRight' }} />
                        <Tooltip />
                        <Legend />
                        <Line yAxisId="left" type="monotone" dataKey="loading" stroke="#8884d8" name="Loading %" />
                        <Line yAxisId="right" type="monotone" dataKey="voltage" stroke="#82ca9d" name="Voltage (pu)" />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
              <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 className="text-lg font-semibold text-gray-900">Grid Alerts</h2>
              </div>
              
              <div className="p-4">
                {gridAlerts ? (
                  <div className="space-y-4">
                    {gridAlerts.voltage_violations.length > 0 && (
                      <div>
                        <h3 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                          <AlertTriangle className="h-4 w-4 text-orange-500 mr-1" />
                          Voltage Violations
                        </h3>
                        <ul className="space-y-2">
                          {gridAlerts.voltage_violations.map((violation: any, index: number) => (
                            <li key={index} className="bg-orange-50 rounded-md p-3 text-sm border border-orange-100">
                              <p className="font-medium text-gray-900">{violation.entity_id} ({violation.entity_type})</p>
                              <p className="text-gray-600">Time: {violation.timestamp}</p>
                              <p className="text-gray-600">Voltage: {violation.value_pu.toFixed(3)} pu ({violation.limit_type} limit)</p>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {gridAlerts.loading_violations.length > 0 && (
                      <div>
                        <h3 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                          <AlertTriangle className="h-4 w-4 text-red-500 mr-1" />
                          Loading Violations
                        </h3>
                        <ul className="space-y-2">
                          {gridAlerts.loading_violations.map((violation: any, index: number) => (
                            <li key={index} className="bg-red-50 rounded-md p-3 text-sm border border-red-100">
                              <p className="font-medium text-gray-900">{violation.entity_id} ({violation.entity_type})</p>
                              <p className="text-gray-600">Time: {violation.timestamp}</p>
                              <p className="text-gray-600">Loading: {violation.loading_percent.toFixed(1)}%</p>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    <div className="bg-gray-50 rounded-md p-4 border border-gray-200">
                      <h3 className="text-sm font-medium text-gray-700 mb-2">Summary</h3>
                      <p className="text-sm text-gray-600">Total voltage violation hours: <span className="font-medium">{gridAlerts.summary.total_voltage_violation_hours}</span></p>
                      <p className="text-sm text-gray-600">Max transformer loading: <span className="font-medium">{gridAlerts.summary.max_transformer_loading_percent}%</span></p>
                      <p className="text-sm text-gray-600">Max line loading: <span className="font-medium">{gridAlerts.summary.max_line_loading_percent}%</span></p>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-64">
                    <div className="text-center">
                      <Info className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500">No grid alerts data available</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {selectedEntity ? (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="text-lg font-semibold text-gray-900">Entity Details</h2>
                </div>
                
                <div className="p-4">
                  <div className="space-y-3">
                    <div className="grid grid-cols-2 gap-2">
                      <span className="text-sm font-medium text-gray-500">ID:</span>
                      <span className="text-sm text-gray-900">{selectedEntity.entity_id}</span>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <span className="text-sm font-medium text-gray-500">Type:</span>
                      <span className="text-sm text-gray-900">{selectedEntity.record_type}</span>
                    </div>
                    {selectedEntity.voltage_pu && (
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Voltage:</span>
                        <span className="text-sm text-gray-900">{selectedEntity.voltage_pu.toFixed(3)} pu</span>
                      </div>
                    )}
                    {selectedEntity.loading_percent && (
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Loading:</span>
                        <span className="text-sm text-gray-900">{selectedEntity.loading_percent.toFixed(1)}%</span>
                      </div>
                    )}
                    {selectedEntity.p_injection_kW && (
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Power Injection:</span>
                        <span className="text-sm text-gray-900">{selectedEntity.p_injection_kW.toFixed(1)} kW</span>
                      </div>
                    )}
                    {selectedEntity.p_flow_from_kW && (
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Power Flow:</span>
                        <span className="text-sm text-gray-900">{selectedEntity.p_flow_from_kW.toFixed(1)} kW</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 h-64 flex items-center justify-center">
                <div className="text-center">
                  <Info className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-gray-500">Click on a grid element to view details</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\DistrictOverview.tsx
============================================================
import React, { useContext, useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Building, Zap, Cable, Cpu, ArrowRight } from 'lucide-react';
import MapComponent from '../components/MapComponent';
import { mockFeeders, mockDistrictSummary } from '../data/mockData';

export const DistrictOverview: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const { selectedDistrict, districtScope } = useContext(AppContext);
  const [districtData, setDistrictData] = useState<any>(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (districtId) {
      // In a real app, we would fetch this data from the backend
      const feeder = mockFeeders.find(f => f.feeder_id === districtId);
      const summary = mockDistrictSummary[districtId as keyof typeof mockDistrictSummary] || mockDistrictSummary.FDR001;
      
      setDistrictData({
        ...feeder,
        ...summary
      });
    }
  }, [districtId]);

  if (!districtData) {
    return <div className="flex justify-center items-center h-64">Loading district data...</div>;
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{districtData.district_name}</h1>
            <p className="text-gray-600">Feeder ID: {districtData.feeder_id} | Postcode: {districtData.postcode_prefix}</p>
          </div>
          <button
            className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 flex items-center"
            onClick={() => navigate(`/district/${districtId}/explorer`)}
          >
            Explore Detailed Data <ArrowRight className="ml-2 h-4 w-4" />
          </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-blue-50 rounded-lg p-4 border border-blue-100">
                <div className="flex items-center mb-2">
                  <Building className="h-5 w-5 text-blue-600 mr-2" />
                  <h3 className="font-semibold text-gray-900">Buildings</h3>
                </div>
                <p className="text-3xl font-bold text-blue-700">{districtData.num_buildings}</p>
              </div>
              
              <div className="bg-green-50 rounded-lg p-4 border border-green-100">
                <div className="flex items-center mb-2">
                  <Zap className="h-5 w-5 text-green-600 mr-2" />
                  <h3 className="font-semibold text-gray-900">Peak Load</h3>
                </div>
                <p className="text-3xl font-bold text-green-700">{districtData.total_peak_load_kW} kW</p>
              </div>
              
              <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-100">
                <div className="flex items-center mb-2">
                  <Zap className="h-5 w-5 text-yellow-600 mr-2" />
                  <h3 className="font-semibold text-gray-900">Solar Capacity</h3>
                </div>
                <p className="text-3xl font-bold text-yellow-700">{districtData.total_solar_capacity_kWp} kWp</p>
              </div>
              
              <div className="bg-purple-50 rounded-lg p-4 border border-purple-100">
                <div className="flex items-center mb-2">
                  <Cable className="h-5 w-5 text-purple-600 mr-2" />
                  <h3 className="font-semibold text-gray-900">Grid Lines</h3>
                </div>
                <p className="text-3xl font-bold text-purple-700">{districtData.num_lines}</p>
              </div>
              
              <div className="bg-orange-50 rounded-lg p-4 border border-orange-100 col-span-2">
                <div className="flex items-center mb-2">
                  <Cpu className="h-5 w-5 text-orange-600 mr-2" />
                  <h3 className="font-semibold text-gray-900">Transformers</h3>
                </div>
                <p className="text-3xl font-bold text-orange-700">{districtData.num_transformers}</p>
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h3 className="font-semibold text-gray-900 mb-2">District Scope</h3>
              <div className="text-sm text-gray-600">
                <p>This district contains:</p>
                <ul className="list-disc list-inside mt-2 space-y-1">
                  <li>{districtData.num_buildings} buildings (IDs: {districtScope?.building_ids.slice(0, 3).join(', ')}...)</li>
                  <li>{districtData.num_lines} grid lines (IDs: {districtScope?.line_ids.slice(0, 3).join(', ')}...)</li>
                  <li>{districtData.num_transformers} transformers (IDs: {districtScope?.transformer_ids.slice(0, 2).join(', ')}...)</li>
                </ul>
              </div>
            </div>
          </div>
          
          <div className="h-96">
            <MapComponent 
              selectedFeeder={selectedDistrict} 
              onFeederSelect={() => {}} // Read-only in this view
            />
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\Home.tsx
============================================================
import React, { useState, useContext, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Search, MapPin } from 'lucide-react';
import { mockFeeders } from '../data/mockData';
import MapComponent from '../components/MapComponent';

export const Home: React.FC = () => {
  const { setSelectedDistrict, setDistrictScope } = useContext(AppContext);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredFeeders, setFilteredFeeders] = useState(mockFeeders);
  const [selectedFeeder, setSelectedFeeder] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    if (searchQuery) {
      const filtered = mockFeeders.filter(feeder => 
        feeder.feeder_id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        feeder.district_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        feeder.postcode_prefix.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredFeeders(filtered);
    } else {
      setFilteredFeeders(mockFeeders);
    }
  }, [searchQuery]);

  const handleFeederSelect = (feederId: string) => {
    setSelectedFeeder(feederId);
    
    // Find the selected feeder data
    const feeder = mockFeeders.find(f => f.feeder_id === feederId);
    if (feeder) {
      // In a real app, we would fetch the district scope from the backend
      const mockDistrictScope = {
        district_id: feederId,
        building_ids: ["B0001", "B0002", "B0003", "B0004", "B0005"],
        line_ids: ["L001A", "L001B", "L002A"],
        transformer_ids: ["TR001", "TR002"]
      };
      
      setDistrictScope(mockDistrictScope);
    }
  };

  const handleConfirmSelection = () => {
    if (selectedFeeder) {
      setSelectedDistrict(selectedFeeder);
      navigate(`/district/${selectedFeeder}`);
    }
  };

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Digital Twin for Long-Term Grid Planning</h1>
        <p className="text-gray-600 mb-6">
          Select a district to begin exploring grid data, creating scenarios, and running simulations for long-term planning.
        </p>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1">
            <div className="mb-4">
              <label htmlFor="district-search" className="block text-sm font-medium text-gray-700 mb-1">
                Search by District, Feeder ID, or Postcode
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Search className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="text"
                  id="district-search"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Search districts..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-md border border-gray-200 h-96 overflow-y-auto">
              <ul className="divide-y divide-gray-200">
                {filteredFeeders.map((feeder) => (
                  <li 
                    key={feeder.feeder_id}
                    className={`px-4 py-3 cursor-pointer hover:bg-blue-50 ${selectedFeeder === feeder.feeder_id ? 'bg-blue-100' : ''}`}
                    onClick={() => handleFeederSelect(feeder.feeder_id)}
                  >
                    <div className="flex items-start">
                      <MapPin className="h-5 w-5 text-blue-500 mt-0.5 mr-2 flex-shrink-0" />
                      <div>
                        <p className="font-medium text-gray-900">{feeder.district_name}</p>
                        <p className="text-sm text-gray-500">Feeder ID: {feeder.feeder_id}</p>
                        <p className="text-sm text-gray-500">Postcode: {feeder.postcode_prefix}</p>
                      </div>
                    </div>
                  </li>
                ))}
                {filteredFeeders.length === 0 && (
                  <li className="px-4 py-3 text-gray-500">
                    No districts found matching "{searchQuery}"
                  </li>
                )}
              </ul>
            </div>
            
            <button
              className={`mt-4 w-full py-2 px-4 rounded-md font-medium ${
                selectedFeeder 
                  ? 'bg-blue-600 text-white hover:bg-blue-700' 
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
              disabled={!selectedFeeder}
              onClick={handleConfirmSelection}
            >
              Select District
            </button>
          </div>
          
          <div className="lg:col-span-2 h-96">
            <MapComponent 
              selectedFeeder={selectedFeeder} 
              onFeederSelect={handleFeederSelect}
            />
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\KnowledgeGraph.tsx
============================================================
import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { Search, Filter, Info, ZoomIn, ZoomOut } from 'lucide-react';
import CytoscapeComponent from 'react-cytoscapejs';
import cytoscape from 'cytoscape';
import coseBilkent from 'cytoscape-cose-bilkent';
import { mockKnowledgeGraph } from '../data/mockData';

// Register the layout extension
cytoscape.use(coseBilkent);

export const KnowledgeGraph: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [selectedEdge, setSelectedEdge] = useState<any>(null);
  const [layout, setLayout] = useState('cose-bilkent');
  const [nodeFilters, setNodeFilters] = useState({
    Building: true,
    Line: true,
    Transformer: true,
    PV_System: true,
    Battery: true
  });
  const cyRef = useRef<any>(null);

  const cytoscapeStylesheet = [
    {
      selector: 'node',
      style: {
        'background-color': '#1a73e8',
        'label': 'data(label)',
        'color': '#333',
        'text-valign': 'center',
        'text-halign': 'center',
        'text-outline-width': 2,
        'text-outline-color': '#fff',
        'font-size': '12px',
        'width': 30,
        'height': 30
      }
    },
    {
      selector: 'node[type="Building"]',
      style: {
        'background-color': '#1a73e8',
        'shape': 'round-rectangle'
      }
    },
    {
      selector: 'node[type="Line"]',
      style: {
        'background-color': '#fbbc04',
        'shape': 'diamond'
      }
    },
    {
      selector: 'node[type="Transformer"]',
      style: {
        'background-color': '#ea4335',
        'shape': 'hexagon'
      }
    },
    {
      selector: 'node[type="PV_System"]',
      style: {
        'background-color': '#34a853',
        'shape': 'triangle'
      }
    },
    {
      selector: 'node[type="Battery"]',
      style: {
        'background-color': '#9334e6',
        'shape': 'round-pentagon'
      }
    },
    {
      selector: 'edge',
      style: {
        'width': 2,
        'line-color': '#ccc',
        'target-arrow-color': '#ccc',
        'target-arrow-shape': 'triangle',
        'curve-style': 'bezier',
        'label': 'data(label)',
        'font-size': '10px',
        'text-rotation': 'autorotate',
        'text-margin-y': -10,
        'text-outline-width': 2,
        'text-outline-color': '#fff'
      }
    },
    {
      selector: 'edge[label="CONNECTED_TO"]',
      style: {
        'line-color': '#1a73e8',
        'target-arrow-color': '#1a73e8'
      }
    },
    {
      selector: 'edge[label="FEEDS_FROM_TX"]',
      style: {
        'line-color': '#ea4335',
        'target-arrow-color': '#ea4335'
      }
    },
    {
      selector: 'edge[label="HAS_ASSET"]',
      style: {
        'line-color': '#34a853',
        'target-arrow-color': '#34a853'
      }
    },
    {
      selector: '.highlighted',
      style: {
        'background-color': '#f50057',
        'line-color': '#f50057',
        'target-arrow-color': '#f50057',
        'transition-property': 'background-color, line-color, target-arrow-color',
        'transition-duration': '0.3s'
      }
    }
  ];

  useEffect(() => {
    if (cyRef.current) {
      // Set up event handlers
      cyRef.current.on('tap', 'node', (evt: any) => {
        const node = evt.target;
        setSelectedNode(node.data());
        setSelectedEdge(null);
        
        // Highlight the node and its connected edges
        cyRef.current.elements().removeClass('highlighted');
        node.addClass('highlighted');
        node.connectedEdges().addClass('highlighted');
      });
      
      cyRef.current.on('tap', 'edge', (evt: any) => {
        const edge = evt.target;
        setSelectedEdge(edge.data());
        setSelectedNode(null);
        
        // Highlight the edge and its connected nodes
        cyRef.current.elements().removeClass('highlighted');
        edge.addClass('highlighted');
        edge.connectedNodes().addClass('highlighted');
      });
      
      cyRef.current.on('tap', function(evt: any) {
        if (evt.target === cyRef.current) {
          // Clicked on background
          setSelectedNode(null);
          setSelectedEdge(null);
          cyRef.current.elements().removeClass('highlighted');
        }
      });
    }
  }, []);

  const handleSearch = () => {
    if (!searchQuery || !cyRef.current) return;
    
    const searchLower = searchQuery.toLowerCase();
    const matchingNodes = cyRef.current.nodes().filter((node: any) => {
      const data = node.data();
      return data.id.toLowerCase().includes(searchLower) || 
             data.label.toLowerCase().includes(searchLower);
    });
    
    if (matchingNodes.length > 0) {
      // Select the first matching node
      const node = matchingNodes[0];
      setSelectedNode(node.data());
      setSelectedEdge(null);
      
      // Highlight the node and its connected edges
      cyRef.current.elements().removeClass('highlighted');
      node.addClass('highlighted');
      node.connectedEdges().addClass('highlighted');
      
      // Center the view on this node
      cyRef.current.animate({
        fit: {
          eles: node,
          padding: 50
        },
        duration: 500
      });
    }
  };

  const handleZoomIn = () => {
    if (cyRef.current) {
      cyRef.current.zoom({
        level: cyRef.current.zoom() * 1.2,
        renderedPosition: { x: cyRef.current.width() / 2, y: cyRef.current.height() / 2 }
      });
    }
  };

  const handleZoomOut = () => {
    if (cyRef.current) {
      cyRef.current.zoom({
        level: cyRef.current.zoom() * 0.8,
        renderedPosition: { x: cyRef.current.width() / 2, y: cyRef.current.height() / 2 }
      });
    }
  };

  const handleFit = () => {
    if (cyRef.current) {
      cyRef.current.fit(undefined, 50);
    }
  };

  const handleLayoutChange = (newLayout: string) => {
    setLayout(newLayout);
    if (cyRef.current) {
      const layoutOptions = getLayoutOptions(newLayout);
      const layout = cyRef.current.layout(layoutOptions);
      layout.run();
    }
  };

  const getLayoutOptions = (layoutName: string) => {
    switch (layoutName) {
      case 'cose-bilkent':
        return {
          name: 'cose-bilkent',
          idealEdgeLength: 100,
          nodeRepulsion: 5000,
          nodeDimensionsIncludeLabels: true,
          animate: true
        };
      case 'circle':
        return {
          name: 'circle',
          animate: true
        };
      case 'grid':
        return {
          name: 'grid',
          animate: true
        };
      case 'concentric':
        return {
          name: 'concentric',
          animate: true
        };
      default:
        return {
          name: 'cose-bilkent',
          idealEdgeLength: 100,
          nodeRepulsion: 5000,
          nodeDimensionsIncludeLabels: true,
          animate: true
        };
    }
  };

  const toggleNodeFilter = (nodeType: string) => {
    setNodeFilters({
      ...nodeFilters,
      [nodeType]: !nodeFilters[nodeType as keyof typeof nodeFilters]
    });
    
    if (cyRef.current) {
      const newFilters = {
        ...nodeFilters,
        [nodeType]: !nodeFilters[nodeType as keyof typeof nodeFilters]
      };
      
      // Apply filters
      cyRef.current.nodes().forEach((node: any) => {
        const nodeType = node.data('type');
        if (newFilters[nodeType as keyof typeof newFilters]) {
          node.style('display', 'element');
        } else {
          node.style('display', 'none');
        }
      });
    }
  };

  // Filter the graph data based on node filters
  const getFilteredGraphData = () => {
    const filteredNodes = mockKnowledgeGraph.nodes.filter(node => 
      nodeFilters[node.data.type as keyof typeof nodeFilters]
    );
    
    const filteredNodeIds = new Set(filteredNodes.map(node => node.data.id));
    
    const filteredEdges = mockKnowledgeGraph.edges.filter(edge => 
      filteredNodeIds.has(edge.data.source) && filteredNodeIds.has(edge.data.target)
    );
    
    return {
      nodes: filteredNodes,
      edges: filteredEdges
    };
  };

  const filteredGraphData = getFilteredGraphData();

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Knowledge Graph Explorer</h1>
          <div className="flex space-x-2">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                className="block w-64 pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Search nodes..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
              />
            </div>
            <button
              className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700"
              onClick={handleSearch}
            >
              Search
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
              <div className="px-4 py-3 border-b border-gray-200 bg-gray-50">
                <h2 className="font-semibold text-gray-900">Filters</h2>
              </div>
              
              <div className="p-4">
                <h3 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                  <Filter className="h-4 w-4 mr-1" />
                  Node Types
                </h3>
                <div className="space-y-2">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={nodeFilters.Building}
                      onChange={() => toggleNodeFilter('Building')}
                    />
                    <span className="text-sm text-gray-700">Buildings</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={nodeFilters.Line}
                      onChange={() => toggleNodeFilter('Line')}
                    />
                    <span className="text-sm text-gray-700">Lines</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={nodeFilters.Transformer}
                      onChange={() => toggleNodeFilter('Transformer')}
                    />
                    <span className="text-sm text-gray-700">Transformers</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={nodeFilters.PV_System}
                      onChange={() => toggleNodeFilter('PV_System')}
                    />
                    <span className="text-sm text-gray-700">PV Systems</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                      checked={nodeFilters.Battery}
                      onChange={() => toggleNodeFilter('Battery')}
                    />
                    <span className="text-sm text-gray-700">Batteries</span>
                  </label>
                </div>
                
                <h3 className="text-sm font-medium text-gray-700 mt-4 mb-2">Layout</h3>
                <select
                  className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  value={layout}
                  onChange={(e) => handleLayoutChange(e.target.value)}
                >
                  <option value="cose-bilkent">Force-Directed</option>
                  <option value="circle">Circular</option>
                  <option value="grid">Grid</option>
                  <option value="concentric">Concentric</option>
                </select>
                
                <div className="flex justify-between mt-4">
                  <button
                    className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-1 px-2 rounded-md text-sm flex items-center"
                    onClick={handleZoomIn}
                  >
                    <ZoomIn className="h-4 w-4 mr-1" />
                    Zoom In
                  </button>
                  <button
                    className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-1 px-2 rounded-md text-sm flex items-center"
                    onClick={handleZoomOut}
                  >
                    <ZoomOut className="h-4 w-4 mr-1" />
                    Zoom Out
                  </button>
                  <button
                    className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-1 px-2 rounded-md text-sm"
                    onClick={handleFit}
                  >
                    Fit
                  </button>
                </div>
              </div>
            </div>
            
            {(selectedNode || selectedEdge) && (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-4 py-3 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900">
                    {selectedNode ? 'Node Details' : 'Edge Details'}
                  </h2>
                </div>
                
                <div className="p-4">
                  {selectedNode && (
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">ID:</span>
                        <span className="text-sm text-gray-900">{selectedNode.id}</span>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Type:</span>
                        <span className="text-sm text-gray-900">{selectedNode.type}</span>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Label:</span>
                        <span className="text-sm text-gray-900">{selectedNode.label}</span>
                      </div>
                      {selectedNode.year_built && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Year Built:</span>
                          <span className="text-sm text-gray-900">{selectedNode.year_built}</span>
                        </div>
                      )}
                      {selectedNode.has_solar !== undefined && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Has Solar:</span>
                          <span className="text-sm text-gray-900">{selectedNode.has_solar ? 'Yes' : 'No'}</span>
                        </div>
                      )}
                      {selectedNode.capacity_kWp && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Capacity:</span>
                          <span className="text-sm text-gray-900">{selectedNode.capacity_kWp} kWp</span>
                        </div>
                      )}
                      {selectedNode.capacity_MVA && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Capacity:</span>
                          <span className="text-sm text-gray-900">{selectedNode.capacity_MVA} MVA</span>
                        </div>
                      )}
                      {selectedNode.length_km && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Length:</span>
                          <span className="text-sm text-gray-900">{selectedNode.length_km} km</span>
                        </div>
                      )}
                    </div>
                  )}
                  
                  {selectedEdge && (
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Source:</span>
                        <span className="text-sm text-gray-900">{selectedEdge.source}</span>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Target:</span>
                        <span className="text-sm text-gray-900">{selectedEdge.target}</span>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        <span className="text-sm font-medium text-gray-500">Relationship:</span>
                        <span className="text-sm text-gray-900">{selectedEdge.label}</span>
                      </div>
                      {selectedEdge.intervention_type && (
                        <div className="grid grid-cols-2 gap-2">
                          <span className="text-sm font-medium text-gray-500">Intervention:</span>
                          <span className="text-sm text-gray-900">{selectedEdge.intervention_type.replace(/_/g, ' ')}</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
          
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden" style={{ height: '700px' }}>
              <CytoscapeComponent
                elements={CytoscapeComponent.normalizeElements({
                  nodes: filteredGraphData.nodes,
                  edges: filteredGraphData.edges
                })}
                stylesheet={cytoscapeStylesheet}
                layout={getLayoutOptions(layout)}
                style={{ width: '100%', height: '100%' }}
                cy={(cy) => { cyRef.current = cy; }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\ScenarioBuilder.tsx
============================================================
import React, { useState, useContext } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Plus, Edit, Play, Trash2, Copy, Save } from 'lucide-react';

export const ScenarioBuilder: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const { scenarios, setScenarios, setSelectedScenario } = useContext(AppContext);
  const [isCreatingScenario, setIsCreatingScenario] = useState(false);
  const [editingScenario, setEditingScenario] = useState<any>(null);
  const navigate = useNavigate();
  
  // Form state
  const [scenarioName, setScenarioName] = useState('');
  const [retrofitLevel, setRetrofitLevel] = useState('None');
  const [retrofitTarget, setRetrofitTarget] = useState('all');
  const [retrofitPercentage, setRetrofitPercentage] = useState(30);
  const [evAdoptionRate, setEvAdoptionRate] = useState(50);
  const [heatPumpAdoption, setHeatPumpAdoption] = useState(30);
  const [pvExpansionTarget, setPvExpansionTarget] = useState(20);
  const [batteryStorageAdd, setBatteryStorageAdd] = useState(500);
  
  const handleCreateScenario = () => {
    setIsCreatingScenario(true);
    setEditingScenario(null);
    
    // Reset form
    setScenarioName('');
    setRetrofitLevel('None');
    setRetrofitTarget('all');
    setRetrofitPercentage(30);
    setEvAdoptionRate(50);
    setHeatPumpAdoption(30);
    setPvExpansionTarget(20);
    setBatteryStorageAdd(500);
  };
  
  const handleEditScenario = (scenario: any) => {
    setIsCreatingScenario(false);
    setEditingScenario(scenario);
    
    // Populate form with scenario data
    setScenarioName(scenario.scenario_name);
    setRetrofitLevel(scenario.retrofit_level || 'None');
    setRetrofitTarget(scenario.retrofit_target || 'all');
    setRetrofitPercentage(scenario.retrofit_percentage || 30);
    setEvAdoptionRate(scenario.ev_adoption_pct || 50);
    setHeatPumpAdoption(scenario.heatpump_adoption_pct || 30);
    setPvExpansionTarget(scenario.pv_expansion_target_pct || 20);
    setBatteryStorageAdd(scenario.battery_storage_add_kwh || 500);
  };
  
  const handleSaveScenario = () => {
    const newScenario = {
      scenario_id: editingScenario ? editingScenario.scenario_id : `SCN${scenarios.length + 1}`.padStart(6, '0'),
      scenario_name: scenarioName,
      district_id: districtId,
      retrofit_level: retrofitLevel,
      retrofit_target: retrofitTarget,
      retrofit_percentage: retrofitPercentage,
      ev_adoption_pct: evAdoptionRate,
      heatpump_adoption_pct: heatPumpAdoption,
      pv_expansion_target_pct: pvExpansionTarget,
      battery_storage_add_kwh: batteryStorageAdd,
      created_at: new Date().toISOString()
    };
    
    if (editingScenario) {
      // Update existing scenario
      setScenarios(scenarios.map(s => 
        s.scenario_id === editingScenario.scenario_id ? newScenario : s
      ));
    } else {
      // Add new scenario
      setScenarios([...scenarios, newScenario]);
    }
    
    setIsCreatingScenario(false);
    setEditingScenario(null);
  };
  
  const handleDeleteScenario = (scenarioId: string) => {
    setScenarios(scenarios.filter(s => s.scenario_id !== scenarioId));
  };
  
  const handleRunSimulation = (scenario: any) => {
    setSelectedScenario(scenario.scenario_id);
    navigate(`/district/${districtId}/simulation/${scenario.scenario_id}`);
  };
  
  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Scenario Builder</h1>
          <button
            className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 flex items-center"
            onClick={handleCreateScenario}
          >
            <Plus className="h-4 w-4 mr-2" />
            Create New Scenario
          </button>
        </div>
        
        {(isCreatingScenario || editingScenario) && (
          <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              {isCreatingScenario ? 'Create New Scenario' : 'Edit Scenario'}
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="scenario-name" className="block text-sm font-medium text-gray-700 mb-1">
                  Scenario Name
                </label>
                <input
                  type="text"
                  id="scenario-name"
                  className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="e.g., High Electrification 2030"
                  value={scenarioName}
                  onChange={(e) => setScenarioName(e.target.value)}
                />
              </div>
              
              <div className="md:col-span-2">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Retrofit Options</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label htmlFor="retrofit-level" className="block text-sm font-medium text-gray-700 mb-1">
                      Retrofit Level
                    </label>
                    <select
                      id="retrofit-level"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      value={retrofitLevel}
                      onChange={(e) => setRetrofitLevel(e.target.value)}
                    >
                      <option value="None">None</option>
                      <option value="Light">Light</option>
                      <option value="Moderate">Moderate</option>
                      <option value="Deep">Deep</option>
                    </select>
                  </div>
                  
                  <div>
                    <label htmlFor="retrofit-target" className="block text-sm font-medium text-gray-700 mb-1">
                      Target Buildings
                    </label>
                    <select
                      id="retrofit-target"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      value={retrofitTarget}
                      onChange={(e) => setRetrofitTarget(e.target.value)}
                    >
                      <option value="all">All buildings</option>
                      <option value="percentage">Percentage of buildings</option>
                      <option value="filter">Buildings matching filter</option>
                    </select>
                  </div>
                  
                  {retrofitTarget === 'percentage' && (
                    <div>
                      <label htmlFor="retrofit-percentage" className="block text-sm font-medium text-gray-700 mb-1">
                        Percentage (%)
                      </label>
                      <input
                        type="number"
                        id="retrofit-percentage"
                        className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        min="0"
                        max="100"
                        value={retrofitPercentage}
                        onChange={(e) => setRetrofitPercentage(parseInt(e.target.value))}
                      />
                    </div>
                  )}
                </div>
              </div>
              
              <div className="md:col-span-2">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Electrification Options</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="ev-adoption" className="block text-sm font-medium text-gray-700 mb-1">
                      EV Adoption Rate (%)
                    </label>
                    <input
                      type="range"
                      id="ev-adoption"
                      className="block w-full"
                      min="0"
                      max="100"
                      step="5"
                      value={evAdoptionRate}
                      onChange={(e) => setEvAdoptionRate(parseInt(e.target.value))}
                    />
                    <div className="flex justify-between text-xs text-gray-500 mt-1">
                      <span>0%</span>
                      <span>{evAdoptionRate}%</span>
                      <span>100%</span>
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="heat-pump-adoption" className="block text-sm font-medium text-gray-700 mb-1">
                      Heat Pump Adoption (%)
                    </label>
                    <input
                      type="range"
                      id="heat-pump-adoption"
                      className="block w-full"
                      min="0"
                      max="100"
                      step="5"
                      value={heatPumpAdoption}
                      onChange={(e) => setHeatPumpAdoption(parseInt(e.target.value))}
                    />
                    <div className="flex justify-between text-xs text-gray-500 mt-1">
                      <span>0%</span>
                      <span>{heatPumpAdoption}%</span>
                      <span>100%</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="md:col-span-2">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Renewable Integration Options</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="pv-expansion" className="block text-sm font-medium text-gray-700 mb-1">
                      PV Expansion Target (% of suitable rooftops)
                    </label>
                    <input
                      type="range"
                      id="pv-expansion"
                      className="block w-full"
                      min="0"
                      max="100"
                      step="5"
                      value={pvExpansionTarget}
                      onChange={(e) => setPvExpansionTarget(parseInt(e.target.value))}
                    />
                    <div className="flex justify-between text-xs text-gray-500 mt-1">
                      <span>0%</span>
                      <span>{pvExpansionTarget}%</span>
                      <span>100%</span>
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="battery-storage" className="block text-sm font-medium text-gray-700 mb-1">
                      Battery Storage Addition (kWh total)
                    </label>
                    <input
                      type="number"
                      id="battery-storage"
                      className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      min="0"
                      step="50"
                      value={batteryStorageAdd}
                      onChange={(e) => setBatteryStorageAdd(parseInt(e.target.value))}
                    />
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end space-x-3">
              <button
                className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-md font-medium"
                onClick={() => {
                  setIsCreatingScenario(false);
                  setEditingScenario(null);
                }}
              >
                Cancel
              </button>
              <button
                className="bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 flex items-center"
                onClick={handleSaveScenario}
                disabled={!scenarioName}
              >
                <Save className="h-4 w-4 mr-2" />
                {isCreatingScenario ? 'Create Scenario' : 'Update Scenario'}
              </button>
            </div>
          </div>
        )}
        
        <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Scenario Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Retrofit Level</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">EV Adoption</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Heat Pump</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PV Expansion</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {scenarios.length > 0 ? (
                scenarios.map((scenario) => (
                  <tr key={scenario.scenario_id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{scenario.scenario_name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{scenario.retrofit_level}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{scenario.ev_adoption_pct}%</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{scenario.heatpump_adoption_pct}%</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{scenario.pv_expansion_target_pct}%</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(scenario.created_at).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <button
                          className="text-blue-600 hover:text-blue-900"
                          onClick={() => handleRunSimulation(scenario)}
                        >
                          <Play className="h-4 w-4" />
                          <span className="sr-only">Run</span>
                        </button>
                        <button
                          className="text-gray-600 hover:text-gray-900"
                          onClick={() => handleEditScenario(scenario)}
                        >
                          <Edit className="h-4 w-4" />
                          <span className="sr-only">Edit</span>
                        </button>
                        <button
                          className="text-gray-600 hover:text-gray-900"
                          onClick={() => {
                            const copy = {...scenario, scenario_id: `SCN${scenarios.length + 1}`.padStart(6, '0'), scenario_name: `Copy of ${scenario.scenario_name}`};
                            setScenarios([...scenarios, copy]);
                          }}
                        >
                          <Copy className="h-4 w-4" />
                          <span className="sr-only">Copy</span>
                        </button>
                        <button
                          className="text-red-600 hover:text-red-900"
                          onClick={() => handleDeleteScenario(scenario.scenario_id)}
                        >
                          <Trash2 className="h-4 w-4" />
                          <span className="sr-only">Delete</span>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={7} className="px-6 py-4 text-center text-sm text-gray-500">
                    No scenarios created yet. Click "Create New Scenario" to get started.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\SimulationRunner.tsx
============================================================
import React, { useState, useEffect, useContext } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { AppContext } from '../context/AppContext';
import { Zap, BarChart2, ArrowRight } from 'lucide-react';

export const SimulationRunner: React.FC = () => {
  const { districtId, scenarioId } = useParams<{ districtId: string, scenarioId: string }>();
  const { scenarios, setSimulationResults } = useContext(AppContext);
  const [currentScenario, setCurrentScenario] = useState<any>(null);
  const [simulationProgress, setSimulationProgress] = useState<number>(0);
  const [simulationStage, setSimulationStage] = useState<string>('');
  const [isComplete, setIsComplete] = useState<boolean>(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (scenarioId && scenarios.length > 0) {
      const scenario = scenarios.find(s => s.scenario_id === scenarioId);
      if (scenario) {
        setCurrentScenario(scenario);
      }
    }
  }, [scenarioId, scenarios]);

  useEffect(() => {
    if (currentScenario) {
      // Simulate the progress of the simulation
      const stages = [
        "Initializing simulation...",
        "1/4: Modeling Building Demands (UBEM)...",
        "2/4: Simulating Solar PV Generation...",
        "3/4: Simulating Battery Dispatch...",
        "4/4: Calculating EV Charging Loads...",
        "Aggregating node loads...",
        "Simulation complete. Results saved."
      ];
      
      let currentStageIndex = 0;
      setSimulationStage(stages[currentStageIndex]);
      
      const interval = setInterval(() => {
        if (currentStageIndex < stages.length - 1) {
          currentStageIndex++;
          setSimulationStage(stages[currentStageIndex]);
          setSimulationProgress(Math.round((currentStageIndex / (stages.length - 1)) * 100));
        } else {
          clearInterval(interval);
          setIsComplete(true);
          
          // Generate mock simulation results
          const mockResults = {
            scenario_id: currentScenario.scenario_id,
            district_id: districtId,
            simulation_period: "Typical Year (TMY)",
            total_annual_consumption_kWh: 1250000,
            total_annual_pv_generation_kWh: 350000,
            total_annual_ev_charging_kWh: 150000,
            district_peak_demand_kW: {
              summer_weekday_1800: 850.5,
              winter_weekday_0900: 920.0
            },
            percent_pv_self_consumed: 65.0,
            time_series_data: {
              // This would be a large dataset in a real application
              timestamps: ["2023-07-15 12:00:00", "2023-07-15 12:15:00", "2023-07-15 12:30:00"],
              building_loads: {
                "B0001": [10.5, 10.2, 9.8],
                "B0002": [15.3, 15.1, 14.9]
              }
            }
          };
          
          setSimulationResults(mockResults);
        }
      }, 1500);
      
      return () => clearInterval(interval);
    }
  }, [currentScenario, districtId, setSimulationResults]);

  const handleContinueToGridAnalysis = () => {
    navigate(`/district/${districtId}/grid-analysis/${scenarioId}`);
  };

  if (!currentScenario) {
    return <div className="flex justify-center items-center h-64">Loading scenario data...</div>;
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Run Demand & Generation Simulations</h1>
            <p className="text-gray-600">Scenario: {currentScenario.scenario_name}</p>
          </div>
        </div>
        
        <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Scenario Parameters</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white rounded-md p-4 border border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Retrofit Options</h3>
              <p className="text-sm text-gray-900">Level: <span className="font-medium">{currentScenario.retrofit_level}</span></p>
              <p className="text-sm text-gray-900">Target: <span className="font-medium">
                {currentScenario.retrofit_target === 'all' ? 'All buildings' : 
                 currentScenario.retrofit_target === 'percentage' ? `${currentScenario.retrofit_percentage}% of buildings` :
                 'Buildings matching filter'}
              </span></p>
            </div>
            
            <div className="bg-white rounded-md p-4 border border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Electrification Options</h3>
              <p className="text-sm text-gray-900">EV Adoption: <span className="font-medium">{currentScenario.ev_adoption_pct}%</span></p>
              <p className="text-sm text-gray-900">Heat Pump Adoption: <span className="font-medium">{currentScenario.heatpump_adoption_pct}%</span></p>
            </div>
            
            <div className="bg-white rounded-md p-4 border border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Renewable Integration</h3>
              <p className="text-sm text-gray-900">PV Expansion: <span className="font-medium">{currentScenario.pv_expansion_target_pct}% of suitable rooftops</span></p>
              <p className="text-sm text-gray-900">Battery Storage: <span className="font-medium">{currentScenario.battery_storage_add_kwh} kWh total</span></p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
          <div className="px-6 py-4">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">Simulation Progress</h2>
            <p className="text-gray-600 mb-4">{simulationStage}</p>
            
            <div className="w-full bg-gray-200 rounded-full h-4 mb-4">
              <div 
                className="bg-blue-600 h-4 rounded-full transition-all duration-500 ease-out"
                style={{ width: `${simulationProgress}%` }}
              ></div>
            </div>
            
            <div className="flex items-center text-sm text-gray-500">
              <Zap className="h-4 w-4 mr-1 text-blue-500" />
              <span>Processing {simulationProgress}% complete</span>
            </div>
          </div>
        </div>
        
        {isComplete && (
          <div className="bg-green-50 rounded-lg p-6 border border-green-200 mb-6">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-medium text-green-800">Simulation Complete</h3>
                <div className="mt-2 text-sm text-green-700">
                  <p>The demand and generation simulation has completed successfully. You can now proceed to the Grid Impact Analysis.</p>
                </div>
                <div className="mt-4">
                  <button
                    className="bg-green-600 text-white py-2 px-4 rounded-md font-medium hover:bg-green-700 flex items-center"
                    onClick={handleContinueToGridAnalysis}
                  >
                    <BarChart2 className="h-4 w-4 mr-2" />
                    Continue to Grid Impact Analysis
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="bg-blue-50 rounded-lg p-6 border border-blue-100">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Simulation Details</h2>
          
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-1">What's happening?</h3>
              <p className="text-sm text-gray-600">
                The simulation is calculating the energy demand and generation profiles for all buildings in the district based on the scenario parameters. This includes:
              </p>
              <ul className="list-disc list-inside mt-2 space-y-1 text-sm text-gray-600 ml-4">
                <li>Building energy modeling (UBEM) for thermal and electrical loads</li>
                <li>Solar PV generation based on weather data and installed capacity</li>
                <li>Battery charging/discharging simulation</li>
                <li>EV charging load profiles based on adoption rates</li>
                <li>Aggregation of all loads to prepare for grid impact analysis</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-700 mb-1">Next Steps</h3>
              <p className="text-sm text-gray-600">
                After the simulation completes, you'll be able to:
              </p>
              <ul className="list-disc list-inside mt-2 space-y-1 text-sm text-gray-600 ml-4">
                <li>Run a grid impact analysis to identify potential issues</li>
                <li>Visualize the results on the district map</li>
                <li>Compare this scenario with others</li>
                <li>Export detailed reports</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\pages\StrategicPlanning.tsx
============================================================
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { TrendingUp, Clock, AlertTriangle, Check, Info, Calendar, Target, ArrowRight, BarChart2, Download } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';

export const StrategicPlanning: React.FC = () => {
  const { districtId } = useParams<{ districtId: string }>();
  const [objectives, setObjectives] = useState({
    cost: { enabled: true, weight: 50, target2030: 500000, target2040: 1000000 },
    carbon: { enabled: true, weight: 30, target2030: 40, target2040: 80 },
    grid: { enabled: true, weight: 20, target2030: 95, target2040: 98 },
    comfort: { enabled: false, weight: 0, target2030: 85, target2040: 90 }
  });
  const [planningHorizon, setPlanningHorizon] = useState({
    start: 2025,
    end: 2045,
    milestones: [2030, 2040]
  });
  const [actionSpace, setActionSpace] = useState({
    allowRetrofits: true,
    allowPV: true,
    allowBatteries: true,
    allowGridUpgrades: true,
    allowDemandResponse: true,
    allowCommunityEnergy: true
  });
  const [implementationConstraints, setImplementationConstraints] = useState({
    maxAnnualBudget: 200000,
    maxSimultaneousProjects: 3,
    minReturnOnInvestment: 8,
    maxPaybackPeriod: 15
  });
  const [isRunning, setIsRunning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [stage, setStage] = useState('');
  const [rlPlan, setRlPlan] = useState<any>(null);
  const [selectedYear, setSelectedYear] = useState<number | null>(null);
  const [showFeasibilityAnalysis, setShowFeasibilityAnalysis] = useState(false);

  // Mock data for feasibility analysis
  const feasibilityData = {
    technical: {
      retrofitCapacity: { score: 85, bottlenecks: ['Skilled workforce availability', 'Material supply chain'] },
      gridUpgradeCapacity: { score: 90, bottlenecks: ['Equipment lead times'] },
      pvInstallationCapacity: { score: 95, bottlenecks: ['Roof structural assessment delays'] }
    },
    economic: {
      fundingAvailability: { score: 80, sources: ['Municipal bonds', 'EU Green Deal funding', 'Private investment'] },
      subsidyPrograms: { score: 75, programs: ['Building retrofit scheme', 'Solar PV incentives'] },
      marketConditions: { score: 85, factors: ['Rising energy prices', 'Carbon pricing'] }
    },
    social: {
      communityAcceptance: { score: 70, challenges: ['Construction disruption', 'Initial costs'] },
      stakeholderSupport: { score: 80, supporters: ['Local businesses', 'Environmental groups'] },
      regulatoryAlignment: { score: 90, frameworks: ['National climate policy', 'Local energy codes'] }
    }
  };
  
  const handleObjectiveToggle = (objective: string) => {
    setObjectives({
      ...objectives,
      [objective]: {
        ...objectives[objective as keyof typeof objectives],
        enabled: !objectives[objective as keyof typeof objectives].enabled
      }
    });
  };
  
  const handleWeightChange = (objective: string, weight: number) => {
    setObjectives({
      ...objectives,
      [objective]: {
        ...objectives[objective as keyof typeof objectives],
        weight
      }
    });
  };
  
  const handleActionSpaceToggle = (action: string) => {
    setActionSpace({
      ...actionSpace,
      [action]: !actionSpace[action as keyof typeof actionSpace]
    });
  };

  const handleConstraintChange = (constraint: string, value: number) => {
    setImplementationConstraints({
      ...implementationConstraints,
      [constraint]: value
    });
  };
  
  const handleStartRLPlanning = () => {
    setIsRunning(true);
    setProgress(0);
    setStage('Initializing RL Environment...');
    
    const stages = [
      "Initializing RL Environment...",
      "Analyzing implementation feasibility...",
      "Calculating resource constraints...",
      "RL Training Epoch 1 / 10",
      "RL Training Epoch 3 / 10",
      "RL Training Epoch 5 / 10",
      "RL Training Epoch 7 / 10",
      "RL Training Epoch 10 / 10",
      "Optimizing action sequence...",
      "Validating implementation timeline...",
      "Finalizing strategic plan..."
    ];
    
    let currentStageIndex = 0;
    
    const interval = setInterval(() => {
      if (currentStageIndex < stages.length - 1) {
        currentStageIndex++;
        setStage(stages[currentStageIndex]);
        setProgress(Math.round((currentStageIndex / (stages.length - 1)) * 100));
      } else {
        clearInterval(interval);
        setProgress(100);
        setStage("Strategic planning complete!");
        
        // Generate enhanced mock RL plan with detailed yearly implementation
        const mockRlPlan = {
          rl_plan_id: "RLP001",
          base_scenario_id: "Baseline2025",
          planning_horizon_start_year: planningHorizon.start,
          planning_horizon_end_year: planningHorizon.end,
          objectives_weights: {
            cost: objectives.cost.weight / 100,
            carbon: objectives.carbon.weight / 100,
            grid: objectives.grid.weight / 100,
            comfort: objectives.comfort.weight / 100
          },
          yearly_implementation: [
            {
              year: 2025,
              theme: "Foundation & Early Wins",
              actions: [
                {
                  action_type: "retrofit_cluster",
                  cluster_id: 3,
                  level: "Moderate",
                  buildings_affected: 45,
                  cost_eur: 150000,
                  expected_benefits: {
                    energy_savings_kwh: 125000,
                    co2_reduction_tons: 50,
                    peak_reduction_kw: 75
                  },
                  implementation_timeline: {
                    planning: "Q1",
                    procurement: "Q2",
                    execution: "Q2-Q3",
                    verification: "Q4"
                  },
                  dependencies: [],
                  risks: [
                    { type: "Supply Chain", severity: "Medium", mitigation: "Early procurement" },
                    { type: "Weather", severity: "Low", mitigation: "Schedule flexibility" }
                  ]
                },
                {
                  action_type: "install_pv",
                  target: "public_buildings",
                  capacity_kwp: 200,
                  cost_eur: 240000,
                  expected_benefits: {
                    annual_generation_kwh: 180000,
                    co2_reduction_tons: 72,
                    peak_reduction_kw: 150
                  },
                  implementation_timeline: {
                    planning: "Q1-Q2",
                    procurement: "Q2",
                    execution: "Q3",
                    verification: "Q4"
                  },
                  dependencies: ["Grid capacity assessment"],
                  risks: [
                    { type: "Technical", severity: "Low", mitigation: "Detailed site surveys" },
                    { type: "Regulatory", severity: "Low", mitigation: "Early permit applications" }
                  ]
                }
              ],
              expected_outcomes: {
                cumulative_investment_eur: 390000,
                annual_energy_savings_kwh: 305000,
                cumulative_co2_reduction_tons: 122,
                renewable_share_pct: 15,
                grid_reliability_improvement_pct: 5
              },
              resource_requirements: {
                budget_eur: 390000,
                staff_hours: 2400,
                key_equipment: ["Installation equipment", "Monitoring systems"],
                external_expertise: ["Energy auditors", "PV installers"]
              }
            },
            {
              year: 2026,
              theme: "Grid Modernization & Storage",
              actions: [
                {
                  action_type: "grid_upgrade",
                  area: "District Center",
                  components: ["Smart transformers", "Grid sensors"],
                  cost_eur: 280000,
                  expected_benefits: {
                    reliability_improvement_pct: 15,
                    hosting_capacity_increase_kw: 500,
                    peak_reduction_kw: 100
                  },
                  implementation_timeline: {
                    planning: "Q1",
                    procurement: "Q2",
                    execution: "Q2-Q4",
                    verification: "Q4"
                  },
                  dependencies: ["2025 PV installation completion"],
                  risks: [
                    { type: "Technical", severity: "Medium", mitigation: "Detailed design review" },
                    { type: "Operational", severity: "Medium", mitigation: "Phased implementation" }
                  ]
                },
                {
                  action_type: "install_battery",
                  location: "Community Energy Hub",
                  capacity_kwh: 500,
                  cost_eur: 350000,
                  expected_benefits: {
                    peak_reduction_kw: 250,
                    energy_arbitrage_eur_per_year: 45000,
                    reliability_improvement_pct: 10
                  },
                  implementation_timeline: {
                    planning: "Q2",
                    procurement: "Q3",
                    execution: "Q4",
                    verification: "Q4-Q1"
                  },
                  dependencies: ["Grid upgrade completion"],
                  risks: [
                    { type: "Technical", severity: "Medium", mitigation: "Factory testing" },
                    { type: "Financial", severity: "Low", mitigation: "Performance guarantees" }
                  ]
                }
              ],
              expected_outcomes: {
                cumulative_investment_eur: 1020000,
                grid_reliability_improvement_pct: 25,
                renewable_integration_capacity_kw: 750,
                peak_reduction_kw: 350
              },
              resource_requirements: {
                budget_eur: 630000,
                staff_hours: 3600,
                key_equipment: ["Battery systems", "Grid equipment"],
                external_expertise: ["Grid engineers", "Battery specialists"]
              }
            },
            {
              year: 2027,
              theme: "Deep Building Retrofits",
              actions: [
                {
                  action_type: "deep_retrofit",
                  target: "residential_cluster",
                  buildings_affected: 120,
                  cost_eur: 1200000,
                  expected_benefits: {
                    energy_savings_kwh: 960000,
                    co2_reduction_tons: 384,
                    comfort_improvement_pct: 40
                  },
                  implementation_timeline: {
                    planning: "Q1",
                    procurement: "Q1-Q2",
                    execution: "Q2-Q4",
                    verification: "Q4"
                  },
                  dependencies: ["Funding secured", "Resident approval"],
                  risks: [
                    { type: "Social", severity: "High", mitigation: "Community engagement" },
                    { type: "Technical", severity: "Medium", mitigation: "Pilot project" }
                  ]
                }
              ],
              expected_outcomes: {
                cumulative_investment_eur: 2220000,
                annual_energy_savings_kwh: 1265000,
                cumulative_co2_reduction_tons: 506,
                average_building_rating_improvement: "C to A"
              },
              resource_requirements: {
                budget_eur: 1200000,
                staff_hours: 7200,
                key_equipment: ["Insulation materials", "HVAC systems"],
                external_expertise: ["Retrofit contractors", "Energy assessors"]
              }
            }
          ],
          milestone_achievements: {
            2030: {
              co2_reduction_pct: 45,
              renewable_share_pct: 35,
              grid_reliability_pct: 95,
              cumulative_investment_eur: 3500000
            },
            2040: {
              co2_reduction_pct: 80,
              renewable_share_pct: 65,
              grid_reliability_pct: 98,
              cumulative_investment_eur: 6800000
            }
          },
          key_performance_indicators: {
            environmental: {
              co2_reduction_trajectory: [
                { year: 2025, value: 122 },
                { year: 2026, value: 250 },
                { year: 2027, value: 506 }
              ],
              renewable_share_trajectory: [
                { year: 2025, value: 15 },
                { year: 2026, value: 22 },
                { year: 2027, value: 28 }
              ]
            },
            economic: {
              cumulative_investment: [
                { year: 2025, value: 390000 },
                { year: 2026, value: 1020000 },
                { year: 2027, value: 2220000 }
              ],
              annual_savings: [
                { year: 2025, value: 45000 },
                { year: 2026, value: 125000 },
                { year: 2027, value: 285000 }
              ]
            },
            technical: {
              grid_reliability: [
                { year: 2025, value: 85 },
                { year: 2026, value: 90 },
                { year: 2027, value: 92 }
              ],
              peak_demand_reduction: [
                { year: 2025, value: 225 },
                { year: 2026, value: 575 },
                { year: 2027, value: 650 }
              ]
            }
          }
        };
        
        setRlPlan(mockRlPlan);
        
        setTimeout(() => {
          setIsRunning(false);
        }, 1000);
      }
    }, 1500);
  };

  const renderYearlyImplementation = (yearPlan: any) => {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-4 mb-4">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{yearPlan.year}: {yearPlan.theme}</h3>
            <p className="text-sm text-gray-600">Investment: €{yearPlan.expected_outcomes.cumulative_investment_eur.toLocaleString()}</p>
          </div>
          <div className="flex space-x-2">
            <button className="text-blue-600 hover:text-blue-800">
              <Download className="h-4 w-4" />
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 mb-4">
          {yearPlan.actions.map((action: any, index: number) => (
            <div key={index} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="font-medium text-gray-900 mb-2">{action.action_type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</h4>
              
              <div className="space-y-2 text-sm">
                <div className="grid grid-cols-2 gap-2">
                  <span className="text-gray-600">Cost:</span>
                  <span className="text-gray-900">€{action.cost_eur.toLocaleString()}</span>
                </div>
                
                {action.buildings_affected && (
                  <div className="grid grid-cols-2 gap-2">
                    <span className="text-gray-600">Buildings:</span>
                    <span className="text-gray-900">{action.buildings_affected}</span>
                  </div>
                )}
                
                {action.expected_benefits && (
                  <div className="mt-2">
                    <h5 className="text-sm font-medium text-gray-700 mb-1">Expected Benefits</h5>
                    {Object.entries(action.expected_benefits).map(([key, value]: [string, any]) => (
                      <div key={key} className="grid grid-cols-2 gap-2">
                        <span className="text-gray-600">{key.replace(/_/g, ' ')}:</span>
                        <span className="text-gray-900">{value.toLocaleString()} {key.includes('kwh') ? 'kWh' : key.includes('kw') ? 'kW' : key.includes('tons') ? 'tons' : ''}</span>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="mt-2">
                  <h5 className="text-sm font-medium text-gray-700 mb-1">Timeline</h5>
                  <div className="bg-white rounded p-2 border border-gray-200">
                    {Object.entries(action.implementation_timeline).map(([phase, timing]: [string, any]) => (
                      <div key={phase} className="grid grid-cols-2 gap-2">
                        <span className="text-gray-600">{phase}:</span>
                        <span className="text-gray-900">{timing}</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                {action.risks && action.risks.length > 0 && (
                  <div className="mt-2">
                    <h5 className="text-sm font-medium text-gray-700 mb-1">Risks & Mitigation</h5>
                    {action.risks.map((risk: any, riskIndex: number) => (
                      <div key={riskIndex} className="bg-white rounded p-2 border border-gray-200 mb-1">
                        <div className="flex items-center justify-between">
                          <span className="text-gray-900">{risk.type}</span>
                          <span className={`text-xs px-2 py-1 rounded ${
                            risk.severity === 'High' ? 'bg-red-100 text-red-800' :
                            risk.severity === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>{risk.severity}</span>
                        </div>
                        <p className="text-xs text-gray-600 mt-1">{risk.mitigation}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <h4 className="font-medium text-gray-900 mb-2">Expected Outcomes</h4>
            <div className="space-y-2 text-sm">
              {Object.entries(yearPlan.expected_outcomes).map(([key, value]: [string, any]) => (
                <div key={key} className="grid grid-cols-2 gap-2">
                  <span className="text-gray-600">{key.replace(/_/g, ' ')}:</span>
                  <span className="text-gray-900">
                    {typeof value === 'number' ? value.toLocaleString() : value}
                    {key.includes('eur') ? ' €' : key.includes('kwh') ? ' kWh' : key.includes('pct') ? '%' : ''}
                  </span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <h4 className="font-medium text-gray-900 mb-2">Resource Requirements</h4>
            <div className="space-y-2 text-sm">
              {Object.entries(yearPlan.resource_requirements).map(([key, value]: [string, any]) => (
                <div key={key} className="grid grid-cols-2 gap-2">
                  <span className="text-gray-600">{key.replace(/_/g, ' ')}:</span>
                  <span className="text-gray-900">
                    {Array.isArray(value) ? value.join(', ') : 
                     typeof value === 'number' ? value.toLocaleString() + (key.includes('eur') ? ' €' : key.includes('hours') ? ' hrs' : '') : 
                     value}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderKPICharts = () => {
    if (!rlPlan) return null;

    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Environmental Progress</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={rlPlan.key_performance_indicators.environmental.co2_reduction_trajectory}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="year" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="value" name="CO₂ Reduction (tons)" stroke="#34a853" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Economic Performance</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={rlPlan.key_performance_indicators.economic.cumulative_investment}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="year" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="value" name="Cumulative Investment (€)" fill="#1a73e8" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    );
  };

  const renderFeasibilityAnalysis = () => {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-gray-900">Implementation Feasibility Analysis</h3>
          <button
            className="text-blue-600 hover:text-blue-800"
            onClick={() => setShowFeasibilityAnalysis(!showFeasibilityAnalysis)}
          >
            {showFeasibilityAnalysis ? 'Hide Details' : 'Show Details'}
          </button>
        </div>

        {showFeasibilityAnalysis && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3">Technical Feasibility</h4>
              {Object.entries(feasibilityData.technical).map(([key, data]: [string, any]) => (
                <div key={key} className="mb-4">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm text-gray-600">{key.replace(/_/g, ' ')}</span>
                    <span className="text-sm font-medium text-gray-900">{data.score}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full"
                      style={{ width: `${data.score}%` }}
                    ></div>
                  </div>
                  <ul className="mt-2 text-xs text-gray-500">
                    {data.bottlenecks.map((bottleneck: string, index: number) => (
                      <li key={index} className="flex items-center">
                        <AlertTriangle className="h-3 w-3 text-yellow-500 mr-1" />
                        {bottleneck}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>

            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3">Economic Feasibility</h4>
              {Object.entries(feasibilityData.economic).map(([key, data]: [string, any]) => (
                <div key={key} className="mb-4">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm text-gray-600">{key.replace(/_/g, ' ')}</span>
                    <span className="text-sm font-medium text-gray-900">{data.score}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-green-600 h-2 rounded-full"
                      style={{ width: `${data.score}%` }}
                    ></div>
                  </div>
                  <ul className="mt-2 text-xs text-gray-500">
                    {(data.sources || data.programs || data.factors).map((item: string, index: number) => (
                      <li key={index} className="flex items-center">
                        <Check className="h-3 w-3 text-green-500 mr-1" />
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>

            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3">Social Feasibility</h4>
              {Object.entries(feasibilityData.social).map(([key, data]: [string, any]) => (
                <div key={key} className="mb-4">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm text-gray-600">{key.replace(/_/g, ' ')}</span>
                    <span className="text-sm font-medium text-gray-900">{data.score}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-purple-600 h-2 rounded-full"
                      style={{ width: `${data.score}%` }}
                    ></div>
                  </div>
                  <ul className="mt-2 text-xs text-gray-500">
                    {(data.challenges || data.supporters || data.frameworks).map((item: string, index: number) => (
                      <li key={index} className="flex items-center">
                        {data.challenges ? (
                          <AlertTriangle className="h-3 w-3 text-yellow-500 mr-1" />
                        ) : (
                          <Check className="h-3 w-3 text-purple-500 mr-1" />
                        )}
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };
  
  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Reinforcement Learning Strategic Planning</h1>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
              <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 className="font-semibold text-gray-900 flex items-center">
                  <TrendingUp className="h-5 w-5 text-blue-600 mr-2" />
                  Planning Configuration
                </h2>
              </div>
              
              <div className="p-4">
                <div className="space-y-6">
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-3">Objective Setting</h3>
                    
                    {Object.values(objectives).reduce((sum, obj) => sum + (obj.enabled ? obj.weight : 0), 0) !== 100 && (
                      <div className="mb-3 p-2 bg-yellow-50 border border-yellow-100 rounded-md text-xs text-yellow-800">
                        <AlertTriangle className="h-3 w-3 inline mr-1" />
                        Total weight should equal 100%
                      </div>
                    )}
                    
                    <div className="space-y-3">
                      {Object.entries(objectives).map(([key, obj]) => (
                        <div key={key}>
                          <div className="flex items-center justify-between mb-1">
                            <label className="flex items-center">
                              <input
                                type="checkbox"
                                className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                                checked={obj.enabled}
                                onChange={() => handleObjectiveToggle(key)}
                              />
                              <span className="text-sm text-gray-700">{key.charAt(0).toUpperCase() + key.slice(1)} Optimization</span>
                            </label>
                            <span className="text-xs text-gray-500">{obj.weight}%</span>
                          </div>
                          <input
                            type="range"
                            className="block w-full"
                            min="0"
                            max="100"
                            step="5"
                            value={obj.weight}
                            onChange={(e) => handleWeightChange(key, parseInt(e.target.value))}
                            disabled={!obj.enabled}
                          />
                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                            <span>2030 Target: {obj.target2030}{key === 'cost' ? '€' : '%'}</span>
                            <span>2040 Target: {obj.target2040}{key === 'cost' ? '€' : '%'}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Planning Horizon</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Start Year</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="2023"
                          max="2050"
                          value={planningHorizon.start}
                          onChange={(e) => setPlanningHorizon({ ...planningHorizon, start: parseInt(e.target.value) })}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">End Year</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="2023"
                          max="2050"
                          value={planningHorizon.end}
                          onChange={(e) => setPlanningHorizon({ ...planningHorizon, end: parseInt(e.target.value) })}
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Implementation Constraints</h3>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Max Annual Budget (€)</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="0"
                          step="10000"
                          value={implementationConstraints.maxAnnualBudget}
                          onChange={(e) => handleConstraintChange('maxAnnualBudget', parseInt(e.target.value))}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Max Simultaneous Projects</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="1"
                          max="10"
                          value={implementationConstraints.maxSimultaneousProjects}
                          onChange={(e) => handleConstraintChange('maxSimultaneousProjects', parseInt(e.target.value))}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Min ROI (%)</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="0"
                          max="30"
                          value={implementationConstraints.minReturnOnInvestment}
                          onChange={(e) => handleConstraintChange('minReturnOnInvestment', parseInt(e.target.value))}
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-500 mb-1">Max Payback Period (years)</label>
                        <input
                          type="number"
                          className="block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          min="1"
                          max="30"
                          value={implementationConstraints.maxPaybackPeriod}
                          onChange={(e) => handleConstraintChange('maxPaybackPeriod', parseInt(e.target.value))}
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-700 mb-2">Action Space Configuration</h3>
                    <div className="space-y-2">
                      {Object.entries(actionSpace).map(([key, value]) => (
                        <label key={key} className="flex items-center">
                          <input
                            type="checkbox"
                            className="rounded text-blue-600 focus:ring-blue-500 mr-2"
                            checked={value}
                            onChange={() => handleActionSpaceToggle(key)}
                          />
                          <span className="text-sm text-gray-700">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                  
                  <button
                    className={`w-full py-2 px-4 rounded-md font-medium flex items-center justify-center ${
                      isRunning 
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                    onClick={handleStartRLPlanning}
                    disabled={isRunning}
                  >
                    <TrendingUp className="h-4 w-4 mr-2" />
                    Start Strategic Planning
                  </button>
                </div>
              </div>
            </div>
            
            {isRunning && (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                  <h2 className="font-semibold text-gray-900 flex items-center">
                    <Clock className="h-5 w-5 text-blue-600 mr-2" />
                    RL Training Progress
                  </h2>
                </div>
                
                <div className="p-4">
                  <p className="text-sm text-gray-600 mb-2">{stage}</p>
                  
                  <div className="w-full bg-gray-200 rounded-full h-4 mb-4">
                    <div 
                      className="bg-blue-600 h-4 rounded-full transition-all duration-500 ease-out"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="lg:col-span-2">
            {rlPlan ? (
              <div>
                {renderFeasibilityAnalysis()}
                {renderKPICharts()}
                
                <div className="bg-white rounded-lg border border-gray-200 overflow-hidden mb-6">
                  <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                    <h2 className="font-semibold text-gray-900">Implementation Roadmap</h2>
                  </div>
                  
                  <div className="p-4">
                    <div className="space-y-4">
                      {rlPlan.yearly_implementation.map((yearPlan: any) => renderYearlyImplementation(yearPlan))}
                    </div>
                  </div>
                </div>
                
                <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                  <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
                    <h2 className="font-semibold text-gray-900">Milestone Achievements</h2>
                  </div>
                  
                  <div className="p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {Object.entries(rlPlan.milestone_achievements).map(([year, metrics]: [string, any]) => (
                        <div key={year} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                          <h3 className="font-medium text-gray-900 mb-2">{year} Targets</h3>
                          <div className="space-y-2">
                            {Object.entries(metrics).map(([key, value]: [string, any]) => (
                              <div key={key} className="flex justify-between items-center">
                                <span className="text-sm text-gray-600">{key.replace(/_/g, ' ')}</span>
                                <span className="text-sm font-medium text-gray-900">
                                  {typeof value === 'number' ? value.toLocaleString() : value}
                                  {key.includes('pct') ? '%' : key.includes('eur') ? '€' : ''}
                                </span>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 flex items-center justify-center h-96">
                <div className="text-center">
                  <TrendingUp className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">Strategic Planning with RL</h3>
                  <p className="text-gray-500 max-w-md mx-auto">
                    Configure your planning objectives and constraints, then let the RL algorithm generate an optimal
                    long-term strategy for sustainable grid development.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\App.tsx
============================================================
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Home } from './pages/Home';
import { DistrictOverview } from './pages/DistrictOverview';
import { DataExplorer } from './pages/DataExplorer';
import { ScenarioBuilder } from './pages/ScenarioBuilder';
import { SimulationRunner } from './pages/SimulationRunner';
import { GridAnalysis } from './pages/GridAnalysis';
import { KnowledgeGraph } from './pages/KnowledgeGraph';
import { AdvancedAnalytics } from './pages/AdvancedAnalytics';
import { StrategicPlanning } from './pages/StrategicPlanning';
import { ComparisonDashboard } from './pages/ComparisonDashboard';
import { Navbar } from './components/Navbar';
import { AppContext } from './context/AppContext';

function App() {
  const [selectedDistrict, setSelectedDistrict] = useState<string | null>(null);
  const [selectedScenario, setSelectedScenario] = useState<string | null>(null);
  const [districtScope, setDistrictScope] = useState<any>(null);
  const [scenarios, setScenarios] = useState<any[]>([]);
  const [simulationResults, setSimulationResults] = useState<any>(null);
  const [gridResults, setGridResults] = useState<any>(null);
  const [clusterResults, setClusterResults] = useState<any>(null);

  return (
    <AppContext.Provider value={{
      selectedDistrict,
      setSelectedDistrict,
      selectedScenario,
      setSelectedScenario,
      districtScope,
      setDistrictScope,
      scenarios,
      setScenarios,
      simulationResults,
      setSimulationResults,
      gridResults,
      setGridResults,
      clusterResults,
      setClusterResults
    }}>
      <Router>
        <div className="min-h-screen bg-gray-50 flex flex-col">
          <Navbar />
          <main className="flex-1 p-4">
            <Routes>
              <Route path="/" element={<Home />} />
              <Route 
                path="/district/:districtId" 
                element={selectedDistrict ? <DistrictOverview /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/explorer" 
                element={selectedDistrict ? <DataExplorer /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/scenarios" 
                element={selectedDistrict ? <ScenarioBuilder /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/simulation/:scenarioId" 
                element={(selectedDistrict && selectedScenario) ? <SimulationRunner /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/grid-analysis/:scenarioId" 
                element={(selectedDistrict && selectedScenario && simulationResults) ? <GridAnalysis /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/knowledge-graph" 
                element={selectedDistrict ? <KnowledgeGraph /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/advanced-analytics" 
                element={selectedDistrict ? <AdvancedAnalytics /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/strategic-planning" 
                element={selectedDistrict ? <StrategicPlanning /> : <Navigate to="/" />} 
              />
              <Route 
                path="/district/:districtId/comparison" 
                element={selectedDistrict ? <ComparisonDashboard /> : <Navigate to="/" />} 
              />
            </Routes>
          </main>
        </div>
      </Router>
    </AppContext.Provider>
  );
}

export default App;
------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\index.css
============================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

------------------------------------------------------------

File: D:\Documents\PhD_DT_dummy\project\src\main.tsx
============================================================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

------------------------------------------------------------

